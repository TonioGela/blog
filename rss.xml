<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>TonioGela&#x27;s</title>
      <link>https://toniogela.dev</link>
      <description>&quot;In order to understand recursion, one must first understand recursion&quot;</description>
      <generator>Zola</generator>
      <language>en</language>
      <atom:link href="https://toniogela.dev/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Sat, 16 Nov 2024 00:00:00 +0000</lastBuildDate>
      <item>
          <title>I guess I won&#x27;t tweet anymore</title>
          <pubDate>Sat, 16 Nov 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://toniogela.dev/no-more-tweets/</link>
          <guid>https://toniogela.dev/no-more-tweets/</guid>
          <description xml:base="https://toniogela.dev/no-more-tweets/">&lt;p&gt;I&#x27;m aware that this blog audience is pretty much non existent and the few of you reading this lines might be here just to read about Scala stuff but given that this blog is one of the few ways to get in touch with me I felt like adding this tiny update here.&lt;&#x2F;p&gt;
&lt;p&gt;I deleted my twitter (or whatever it&#x27;s called now) account as scrolling my homepage lately felt like seeking comfort in a den of haters: useless for boredom, terrible for the mood. From now on assume that anyone using the &lt;code&gt;@toniogela&lt;&#x2F;code&gt; handle might be someone else.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to keep in touch try using Mastodon, Discord or the github-discussions-powered comments here 👇.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Integration testing the Typelevel toolkit</title>
          <pubDate>Wed, 04 Oct 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://toniogela.dev/testing-typelevel-toolkit/</link>
          <guid>https://toniogela.dev/testing-typelevel-toolkit/</guid>
          <description xml:base="https://toniogela.dev/testing-typelevel-toolkit/">&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;toolkit&#x2F;&quot;&gt;Typelevel toolkit&lt;&#x2F;a&gt; is a metalibrary including some &lt;strong&gt;great libraries&lt;&#x2F;strong&gt; by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;&quot;&gt;Typelevel&lt;&#x2F;a&gt;, that was created to speed up the development of cross-platform applications in Scala and that I happily maintain since its creation. It&#x27;s the Typelevel&#x27;s flavour of the official &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scala&#x2F;toolkit&#x2F;&quot;&gt;Scala Toolkit&lt;&#x2F;a&gt;, a set of libraries to perform common programming tasks, that has its own section, full of examples, in the &lt;a href=&quot;https:&#x2F;&#x2F;docs.scala-lang.org&#x2F;toolkit&#x2F;introduction.html&quot;&gt;official Scala documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One of the vaunts of the Typelevel&#x27;s stack is the fact that (almost) every library is published for the all the &lt;strong&gt;three officially supported Scala platforms: JVM, JS and Native&lt;&#x2F;strong&gt;, and for this reason every library is &lt;strong&gt;heavily tested&lt;&#x2F;strong&gt; against every supported platform and Scala version, to ensure a near perfect cross-compatibility.&lt;&#x2F;p&gt;
&lt;p&gt;Since its creation the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;toolkit&#x2F;&quot;&gt;Typelevel toolkit&lt;&#x2F;a&gt; was lacking any sort of testing, mainly due to the fact that it is a mere collection of already battle tested libraries, so why bothering writing tests for it? As &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;toolkit&#x2F;issues&#x2F;49&quot;&gt;this bug&lt;&#x2F;a&gt; promptly reminded us, the main goal of the toolkit is to provide the most seamless experience while using &lt;a href=&quot;https:&#x2F;&#x2F;scala-cli.virtuslab.org&#x2F;&quot;&gt;scala-cli&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ideally you should be able to write:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; helloWorld.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using toolkit typelevel:latest
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IOApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Simple&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.println(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello World!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;and calling &lt;code&gt;scala-cli run {,--js,--native} helloWorld.scala&lt;&#x2F;code&gt; should &lt;strong&gt;Just Work™&lt;&#x2F;strong&gt; printing &lt;code&gt;&quot;Hello World!&quot;&lt;&#x2F;code&gt; to the console.&lt;&#x2F;p&gt;
&lt;p&gt;To be 100% sure we needed CI tests indeed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;planning-the-tests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#planning-the-tests&quot;&gt;Planning the tests&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;What had to be tested though? All the included libraries are already tested, some of them are built using other included libraries, so some sort of &lt;strong&gt;cross testing&lt;&#x2F;strong&gt; was already done. What we were really interested in was always &lt;strong&gt;being sure that scala-cli is always able to compile scripts written using the toolkit&lt;&#x2F;strong&gt;. And what&#x27;s the best way to ensure that &lt;code&gt;scala-cli&lt;&#x2F;code&gt; can compile a script written with the toolkit if not using &lt;code&gt;scala-cli&lt;&#x2F;code&gt; itself?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Pause for dramatic effect&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The coarse idea that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;armanbilge&quot;&gt;Arman&lt;&#x2F;a&gt; and I had in mind was to have a CI doing the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Locally publishing&lt;&#x2F;strong&gt; the toolkit artifact&lt;&#x2F;li&gt;
&lt;li&gt;Passing the artifact&#x27;s version to a bunch of &lt;strong&gt;pre-baked parametrized scripts&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Running&lt;&#x2F;strong&gt; the scripts with &lt;code&gt;scala-cli&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Be happy if every exit code is &lt;strong&gt;0&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;strong&gt;third step&lt;&#x2F;strong&gt; in particular could have been implemented in a couple of ways:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Installing &lt;code&gt;scala-cli&lt;&#x2F;code&gt; in the CI image via GitHub Actions, call it from the tests code, and gather the results&lt;&#x2F;li&gt;
&lt;li&gt;Since &lt;code&gt;scala-cli&lt;&#x2F;code&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;scala-cli.virtuslab.org&#x2F;docs&#x2F;under-the-hood&quot;&gt;native executable generated by GraalVM Native Image&lt;&#x2F;a&gt; and the corresponding jvm artifact &lt;a href=&quot;https:&#x2F;&#x2F;repo1.maven.org&#x2F;maven2&#x2F;org&#x2F;virtuslab&#x2F;scala-cli&#x2F;cli_3&#x2F;&quot;&gt;is distributed&lt;&#x2F;a&gt;, using it as a dependency and calling its main method in the tests.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;We decided to follow the latter, as we didn&#x27;t want to &lt;strong&gt;mangle the GitHub Actions CI file&lt;&#x2F;strong&gt; or relying on the &lt;strong&gt;timely publication of the updated scala-cli GitHub Action&lt;&#x2F;strong&gt;: whenever any continuous integration setting is changed, every developer should apply the same or an equivalent change to its local environment to reflect the testing&#x2F;building remote environment change. This also means more testing&#x2F;contributing documentation that needs to be constantly updated (and that risks becoming outdated at every CI setting changed) and that the contributing&#x2F;developing curve becomes steeper for newcomers (it&#x27;s easier to ask a Scala developer to have just one build tool installed locally, right?).&lt;&#x2F;p&gt;
&lt;p&gt;Also, &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-sbt.org&#x2F;&quot;&gt;sbt&lt;&#x2F;a&gt; is a superb tool for implementing this kind of tests: since it downloads automatically the specified scala-cli artifact we didn&#x27;t need to have scala-cli installed locally, the version we are testing in particular. The build would be more self-contained, the scala-cli artifact version will be managed as every other dependency by &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scala-steward-org&#x2F;scala-steward&quot;&gt;scala-steward&lt;&#x2F;a&gt; and developers and contributors could test locally the repository with ease with a simple &lt;code&gt;sbt test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;BONUS EXAMPLE&lt;&#x2F;strong&gt;: Using &lt;code&gt;scala-cli&lt;&#x2F;code&gt; in &lt;code&gt;scala-cli&lt;&#x2F;code&gt; to run a &lt;code&gt;scala-cli&lt;&#x2F;code&gt; script that runs itself
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; style=&quot;background-color:#a3be8c;color:#1a2539;&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; recursiveScalaCli.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using dep org.virtuslab.scala-cli::cli::1.0.4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;scala.cli.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ScalaCli
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ScalaCliApp &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ScalaCli&lt;&#x2F;span&gt;&lt;span&gt;.main(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;recursiveScalaCli.scala&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;first-tentative-using-the-dependency-in-tests&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#first-tentative-using-the-dependency-in-tests&quot;&gt;First tentative: using the dependency in tests&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;In order to publish the artifacts locally before testing we needed a new &lt;code&gt;tests&lt;&#x2F;code&gt; project and to establish this relationship:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; build.sbt
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;lazy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span&gt;= tlCrossRootProject.aggregate(
&lt;&#x2F;span&gt;&lt;span&gt;  toolkit, 
&lt;&#x2F;span&gt;&lt;span&gt;  toolkitTest,
&lt;&#x2F;span&gt;&lt;span&gt;  tests
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;lazy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tests &lt;&#x2F;span&gt;&lt;span&gt;= project
&lt;&#x2F;span&gt;&lt;span&gt;  .in(file(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;  .settings(
&lt;&#x2F;span&gt;&lt;span&gt;    name := &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test := (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test).dependsOn(toolkit.jvm &#x2F; publishLocal).value
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In this way the &lt;code&gt;test&lt;&#x2F;code&gt; sbt command will always run a &lt;code&gt;publishLocal&lt;&#x2F;code&gt; of the jvm flavor of the toolkit artifact. The project then needed to be set to &lt;strong&gt;not publish its&lt;&#x2F;strong&gt; artifact and to have some dependencies added to actually write the tests. The &lt;code&gt;scala-cli&lt;&#x2F;code&gt; dependency needed some trickery (&lt;code&gt;.cross(CrossVersion.for2_13Use3)&lt;&#x2F;code&gt;) to use the Scala 3 artifact, the only one published, in Scala 2.13 as well.&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; build.sbt
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;lazy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tests &lt;&#x2F;span&gt;&lt;span&gt;= project
&lt;&#x2F;span&gt;&lt;span&gt;  .in(file(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;  .settings(
&lt;&#x2F;span&gt;&lt;span&gt;    name := &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test := (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test).dependsOn(toolkit.jvm &#x2F; publishLocal).value,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Required to use the scala 3 artifact with scala 2.13
&lt;&#x2F;span&gt;&lt;span&gt;    scalacOptions ++= {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(scalaBinaryVersion.value == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2.13&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Ytasty-reader&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    libraryDependencies ++= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org.typelevel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; %% &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;munit-cats-effect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2.0.0-M3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is needed to write scripts&amp;#39; body into files
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;co.fs2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; %% &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fs2-io&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3.9.2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org.virtuslab.scala-cli&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; %% &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cli&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0.4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt; cross (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CrossVersion&lt;&#x2F;span&gt;&lt;span&gt;.for2_13Use3)
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  .enablePlugins(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NoPublishPlugin&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The last bit needed was a way to add to the scripts&#x27; body &lt;strong&gt;which version of the artifact we were publishing right before the testing step and which Scala version we were running on&lt;&#x2F;strong&gt;, in order to test it properly. The only place were this &lt;strong&gt;(non-static)&lt;&#x2F;strong&gt; information was present was the build itself, but we needed to have them &lt;strong&gt;as an information in the source code&lt;&#x2F;strong&gt;. We definitively needed some sbt trickery to make it happen.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is an &lt;strong&gt;unspoken rule&lt;&#x2F;strong&gt; about the Scala community (or in the sbt users community to be precise) that you may already know about:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;If you need some kind of sbt trickery, &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;eed3si9n&quot;&gt;eed3si9n&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; probably wrote a sbt plugin for that&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This was our case with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sbt&#x2F;sbt-buildinfo&quot;&gt;sbt-buildinfo&lt;&#x2F;a&gt;, a sbt plugin whose punchline is &quot;&lt;em&gt;I know this because build.sbt knows this&lt;&#x2F;em&gt;&quot;. As you&#x27;ll discover later, &lt;strong&gt;sbt-buildinfo has been the corner stone of our second and more exhausting approach&lt;&#x2F;strong&gt;, but what briefly does is generating Scala source from your build definitions, and thus makes build information available in the source code too.&lt;&#x2F;p&gt;
&lt;p&gt;As &lt;code&gt;scalaVersion&lt;&#x2F;code&gt; and &lt;code&gt;version&lt;&#x2F;code&gt; are two information that are injected by default, we just needed to add the plugin into &lt;code&gt;project&#x2F;plugins.sbt&lt;&#x2F;code&gt; and enabling it on &lt;code&gt;tests&lt;&#x2F;code&gt; in the build:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; projects&amp;#x2F;plugins.sbt
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;addSbtPlugin(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;com.eed3si9n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sbt-buildinfo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.11.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; build.sbt
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;lazy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tests &lt;&#x2F;span&gt;&lt;span&gt;= project
&lt;&#x2F;span&gt;&lt;span&gt;  .in(file(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;  .settings(
&lt;&#x2F;span&gt;&lt;span&gt;    name := &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test := (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test).dependsOn(toolkit.jvm &#x2F; publishLocal).value,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Required to use the scala 3 artifact with scala 2.13
&lt;&#x2F;span&gt;&lt;span&gt;    scalacOptions ++= {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(scalaBinaryVersion.value == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2.13&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Ytasty-reader&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    libraryDependencies ++= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org.typelevel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; %% &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;munit-cats-effect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2.0.0-M3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is needed to write scripts&amp;#39; body into files
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;co.fs2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; %% &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fs2-io&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3.9.2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org.virtuslab.scala-cli&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; %% &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cli&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0.4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt; cross (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CrossVersion&lt;&#x2F;span&gt;&lt;span&gt;.for2_13Use3)
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  .enablePlugins(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NoPublishPlugin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfoPlugin&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;strong&gt;Time to write the tests!&lt;&#x2F;strong&gt; The first thing that was needed was a way to write on a temporary file the body of the script, including the artifact and Scala version, and then submit the file to scala-cli main method:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; ToolkitTests.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;org.typelevel.toolkit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;munit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CatsEffectSuite
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.io.file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;scala.cli.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ScalaCli
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;buildinfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.{version, scalaVersion}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToolkitCompilationTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CatsEffectSuite &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  testRun(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Toolkit should compile a simple Hello Cats Effect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|import cats.effect._
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        |object Hello extends IOApp.Simple {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        |  def run = IO.println(&amp;quot;Hello toolkit!&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        |}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We&amp;#39;ll describe this method in a later section of the post
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;testRun&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;testName&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scriptBody&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Unit &lt;&#x2F;span&gt;&lt;span&gt;= test(testName)(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].tempFile(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-toolkit.scala&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      .use { path =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;&amp;gt; using scala &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.scalaVersion}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;&amp;gt; using toolkit typelevel:&lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.version}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          ).mkString(&amp;quot;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;(header, scriptBody.stripMargin)
&lt;&#x2F;span&gt;&lt;span&gt;          .through(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].writeUtf8(path))
&lt;&#x2F;span&gt;&lt;span&gt;          .compile
&lt;&#x2F;span&gt;&lt;span&gt;          .drain &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.delay(
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ScalaCli&lt;&#x2F;span&gt;&lt;span&gt;.main(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Array&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, path.toString))
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;And with this easy and lean approach we were finally able to &lt;strong&gt;test the toolkit&lt;&#x2F;strong&gt;! 🎉🎉🎉&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Another pause for dramatic effect&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Except we weren&#x27;t really testing everything: the &lt;code&gt;js&lt;&#x2F;code&gt; and &lt;code&gt;native&lt;&#x2F;code&gt; artifact weren&#x27;t tested by this approach, as the &lt;code&gt;tests&lt;&#x2F;code&gt; project is a jvm only project depending on &lt;code&gt;toolkit.jvm&lt;&#x2F;code&gt;. Also, the &lt;code&gt;toolkit-test&lt;&#x2F;code&gt; artifact wasn&#x27;t even taken in consideration. We needed a more general&#x2F;agnostic solution.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;second-approach-invoking-java-as-an-external-process&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#second-approach-invoking-java-as-an-external-process&quot;&gt;Second approach: Invoking Java as an external process&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The first tentative was good but not satisfying at all: we had to find a way to test the &lt;code&gt;js&lt;&#x2F;code&gt; and &lt;code&gt;native&lt;&#x2F;code&gt; artifacts too, but how? The &lt;code&gt;scala-cli&lt;&#x2F;code&gt; artifact is &lt;strong&gt;JVM Scala 3 only&lt;&#x2F;strong&gt;, and there&#x27;s no way to use it as a dependency on other platforms. The only way to use it is just through the jvm, and that&#x27;s &lt;strong&gt;precisely what we decided to do&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Given that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;At least a JVM was present in the testing environment&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fs2.io.process&lt;&#x2F;code&gt; exposes a &lt;strong&gt;cross-platform way to launch and manage external processes&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;we had the scala-cli artifact on our classpath&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;we knew that was possible, there was just some &lt;code&gt;sbt&lt;&#x2F;code&gt;&lt;em&gt;-fu&lt;&#x2F;em&gt; needed.&lt;&#x2F;p&gt;
&lt;p&gt;The thing we needed to intelligently invoke was a mere &lt;code&gt;java -cp &amp;lt;scala-cli + transitive deps classpath&amp;gt; scala.cli.ScalaCli&lt;&#x2F;code&gt;, pass to it &lt;code&gt;run &amp;lt;scriptFilename&amp;gt;.scala&lt;&#x2F;code&gt; and wait for the exit code, for each &lt;code&gt;(scalaVersion,platform)&lt;&#x2F;code&gt; combination.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;buildinfo-magic&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#buildinfo-magic&quot;&gt;BuildInfo magic&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To begin we had to transform the &lt;code&gt;tests&lt;&#x2F;code&gt; project in to a cross project (using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;portable-scala&#x2F;sbt-crossproject&quot;&gt;sbt-crossproject&lt;&#x2F;a&gt;, that is embedded in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;sbt-typelevel&quot;&gt;sbt-typelevel&lt;&#x2F;a&gt;) and make every subproject &lt;code&gt;test&lt;&#x2F;code&gt; command depend on the publication of the respective artifacts:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; build.sbt
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;lazy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tests &lt;&#x2F;span&gt;&lt;span&gt;= crossProject(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JVMPlatform&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;JSPlatform&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NativePlatform&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  .in(file(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;  .settings(
&lt;&#x2F;span&gt;&lt;span&gt;    name := &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    scalacOptions ++= {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(scalaBinaryVersion.value == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2.13&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-Ytasty-reader&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Nil
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    libraryDependencies ++= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Seq&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org.typelevel&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; %%% &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;munit-cats-effect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2.0.0-M3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;co.fs2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; %%% &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fs2-io&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3.9.2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org.virtuslab.scala-cli&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; %% &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cli&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0.4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; cross (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CrossVersion&lt;&#x2F;span&gt;&lt;span&gt;.for2_13Use3)
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  .jvmSettings(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test := (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test).dependsOn(toolkit.jvm &#x2F; publishLocal, toolkitTest.jvm &#x2F; publishLocal).value
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  .jsSettings(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test := (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test).dependsOn(toolkit.js &#x2F; publishLocal, toolkitTest.js &#x2F; publishLocal).value
&lt;&#x2F;span&gt;&lt;span&gt;    scalaJSLinkerConfig ~= { _.withModuleKind(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ModuleKind&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CommonJSModule&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  .nativeSettings(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test := (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Test &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; test).dependsOn(toolkit.native &#x2F; publishLocal, toolkitTest.native &#x2F; publishLocal).value
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  .enablePlugins(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfoPlugin&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NoPublishPlugin&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;One thing to note is that we deliberately made a &quot;mistake&quot;. The &lt;code&gt;munit-cats-effect&lt;&#x2F;code&gt; and &lt;code&gt;fs2-io&lt;&#x2F;code&gt; dependencies are declared using &lt;code&gt;%%%&lt;&#x2F;code&gt; the operator that not only appends &lt;code&gt;_${scalaBinaryVersion}&lt;&#x2F;code&gt; to the end of the artifact name but also the platform name (appending i.e. for a Scala 3 native dependency &lt;code&gt;_native0.4_3&lt;&#x2F;code&gt;), but the &lt;code&gt;scala-cli&lt;&#x2F;code&gt; one was declared using just &lt;code&gt;%%&lt;&#x2F;code&gt; and the &lt;code&gt;% Test&lt;&#x2F;code&gt; modifier was removed. In this way we were sure that, for &lt;strong&gt;every platform&lt;&#x2F;strong&gt;, the &lt;code&gt;Compile &#x2F; dependencyClasspath&lt;&#x2F;code&gt; would have included just the &lt;strong&gt;jvm version of scala-cli&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To inject the classpath into the source code we leveraged our beloved friend &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sbt&#x2F;sbt-buildinfo&quot;&gt;sbt-buildinfo&lt;&#x2F;a&gt;, that &lt;strong&gt;it&#x27;s not limited to inject just &lt;code&gt;SettingKey[T]&lt;&#x2F;code&gt;s&lt;&#x2F;strong&gt; and&#x2F;or static information (computed at project load time), but using its own syntax &lt;strong&gt;can inject &lt;code&gt;TaskKey[T]&lt;&#x2F;code&gt;s after they&#x27;ve been evaluated&lt;&#x2F;strong&gt; (and re-evaluated each time at compile). So in the common &lt;code&gt;.settings&lt;&#x2F;code&gt; we added:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; build.sbt
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;  buildInfoKeys += scalaBinaryVersion,
&lt;&#x2F;span&gt;&lt;span&gt;  buildInfoKeys += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfoKey&lt;&#x2F;span&gt;&lt;span&gt;.map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Compile &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; dependencyClasspath) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(_, v) =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;classPath&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; -&amp;gt; v.seq
&lt;&#x2F;span&gt;&lt;span&gt;          .map(_.data.getAbsolutePath)
&lt;&#x2F;span&gt;&lt;span&gt;          .mkString(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;File&lt;&#x2F;span&gt;&lt;span&gt;.pathSeparator) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; That&amp;#39;s the way java -cp accepts classpath info
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    buildInfoKeys += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfoKey&lt;&#x2F;span&gt;&lt;span&gt;.action(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;javaHome&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= sys.env.get(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;JAVA_HOME&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).orElse(sys.props.get(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;java.home&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).get
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(path.endsWith(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;jre&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; handle JDK 8 installations
&lt;&#x2F;span&gt;&lt;span&gt;        path.replace(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;jre&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt; path
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    buildInfoKeys += &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scala3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; -&amp;gt; (scalaVersion.value.head == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;#39;3&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;and in each platform specific section we added to buildInfo the platform&#x27;s name:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; build.sbt
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;  .jvmSettings(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;    buildInfoKeys += &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;platform&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jvm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  .jsSettings(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;    buildInfoKeys += &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;platform&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;js&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;  .nativeSettings(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;    buildInfoKeys += &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;platform&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; -&amp;gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;native&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;in this way we could leverage in our source code all the information required to run &lt;code&gt;scala-cli&lt;&#x2F;code&gt; and test our snippets:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;classPath&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String          &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.classPath
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;javaHome&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String           &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.javaHome
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;platform&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String           &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.platform
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scalaBinaryVersion&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.scalaBinaryVersion
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scala3&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Boolean            &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.scala3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;invoking-java-via-fs2-process&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#invoking-java-via-fs2-process&quot;&gt;Invoking Java via fs2 &lt;code&gt;Process&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Once we had all the required components, invoking java was easy, we just created and spawned a &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;#&#x2F;io?id=processes&quot;&gt;Process&lt;&#x2F;a&gt; from the package &lt;code&gt;fs2.io.process&lt;&#x2F;code&gt;, that is implemented for every platform under the very same API:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; ScalaCliTest.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;buildinfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.kernel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Resource
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.std.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Console
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.syntax.parallel.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.io.file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.io.process.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProcessBuilder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;munit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Assertions&lt;&#x2F;span&gt;&lt;span&gt;.fail
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ScalaCliProcess &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;scalaCli&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProcessBuilder&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.javaHome}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    args.prependedAll(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-cp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.classPath, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scala.cli.ScalaCli&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;  ).spawn[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    .use(process =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      (
&lt;&#x2F;span&gt;&lt;span&gt;        process.exitValue,
&lt;&#x2F;span&gt;&lt;span&gt;        process.stdout.through(fs2.text.utf8.decode).compile.string,
&lt;&#x2F;span&gt;&lt;span&gt;        process.stderr.through(fs2.text.utf8.decode).compile.string
&lt;&#x2F;span&gt;&lt;span&gt;      ).parFlatMapN {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, _, _) =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.unit
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span&gt;(exitCode, stdout, stdErr) =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.println(stdout) &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Console&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].errorln(stdErr) &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.delay(
&lt;&#x2F;span&gt;&lt;span&gt;            fail(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Non zero exit code (&lt;&#x2F;span&gt;&lt;span&gt;$exitCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) for &lt;&#x2F;span&gt;&lt;span&gt;${args.mkString(&amp;quot; &amp;quot;)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;          )
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;..
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Let&#x27;s dissect this function:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ProcessBuilder&lt;&#x2F;code&gt; constructor accepts a &lt;code&gt;String&lt;&#x2F;code&gt; command and a list of &lt;code&gt;String&lt;&#x2F;code&gt; arguments, it can then spawn the subprocess using &lt;code&gt;.spawn[IO]&lt;&#x2F;code&gt;, that will return a &lt;code&gt;Resource[IO, Process[IO]]&lt;&#x2F;code&gt;. Resource is a really useful Cats Effect datatype that deserves its own post, but you can find some information in &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;docs&#x2F;std&#x2F;resource&quot;&gt;the official documentation&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;Process[IO]&lt;&#x2F;code&gt; resource is &lt;code&gt;use&lt;&#x2F;code&gt;d, and its exit code is gathered, &lt;strong&gt;in parallel&lt;&#x2F;strong&gt;, together with its stdout and stderr using &lt;code&gt;parFlatMapN&lt;&#x2F;code&gt;. This will prevent deadlocking, as we won&#x27;t wait for a process&#x27; exit code without consuming its stdout and stderr streams.&lt;&#x2F;li&gt;
&lt;li&gt;Once we have the results, if the exit code is 0 we&#x27;ll simply discard the content of the streams, otherwise we&#x27;ll print everything that might be useful to debug possible errors, and we&#x27;ll instruct our testing framework to fail with a specific message.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now we needed a method to write in a temporary file the source of each scala-cli script with all the information needed to correctly test the toolkit. Luckily for us &lt;code&gt;fs2&lt;&#x2F;code&gt; makes it easy:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; ScalaCliTest.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;writeToFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scriptBody&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isTest&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Boolean&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Resource&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].tempFile(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(isTest) &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-toolkit.test.scala&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-toolkit.scala&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      .evalTap { path =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;header &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;&amp;gt; using scala &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.scalaVersion}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;&amp;gt; using toolkit typelevel:&lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.version}&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;&amp;gt; using platform &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.platform}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        ).mkString(&amp;quot;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;(header, scriptBody.stripMargin)
&lt;&#x2F;span&gt;&lt;span&gt;          .through(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].writeUtf8(path))
&lt;&#x2F;span&gt;&lt;span&gt;          .compile
&lt;&#x2F;span&gt;&lt;span&gt;          .drain
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      .map(_.toString)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Dissecting this function too we&#x27;ll see that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Files[IO].tempFile&lt;&#x2F;code&gt; creates a temporary file as a &lt;code&gt;Resource&lt;&#x2F;code&gt;, whose release method will &lt;strong&gt;delete the temporary file&lt;&#x2F;strong&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;isTest&lt;&#x2F;code&gt; parameter is used to determine the extension that the temp file will have, as &lt;code&gt;scala-cli&lt;&#x2F;code&gt; requires a specific extension for both source and test files.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;.evalTap&lt;&#x2F;code&gt; will run an effectful side effect but returning the same &lt;code&gt;Resource&lt;&#x2F;code&gt; it was called on. In this case it will write the script content in the newly created temp file. This effect will run &lt;strong&gt;AFTER&lt;&#x2F;strong&gt; the file creation, but &lt;strong&gt;BEFORE&lt;&#x2F;strong&gt; any other effectful action that can be performed in the &lt;code&gt;use&lt;&#x2F;code&gt; method.&lt;&#x2F;li&gt;
&lt;li&gt;In the effect we&#x27;ll produce a set of &lt;code&gt;scala-cli&lt;&#x2F;code&gt; directives using &lt;code&gt;BuildInfo&lt;&#x2F;code&gt;, we&#x27;ll prepend them to the script&#x27;s body and write everything in the temp file.&lt;&#x2F;li&gt;
&lt;li&gt;The path of the freshly baked scala-cli script will then be provided as a &lt;code&gt;Resource[IO, String]&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The only thing we needed to do was to &lt;strong&gt;combine the two methods&lt;&#x2F;strong&gt; into a testing method:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; ScalaCliTest.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;testRun&lt;&#x2F;span&gt;&lt;span&gt;(testName:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] = 
&lt;&#x2F;span&gt;&lt;span&gt;   test(testName)(writeToFile(body)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;).use(f =&amp;gt; scalaCli(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; :: f :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Nil&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;testTest&lt;&#x2F;span&gt;&lt;span&gt;(testName:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] = 
&lt;&#x2F;span&gt;&lt;span&gt;    test(testName)(writeToFile(body)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;).use(f =&amp;gt; scalaCli(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; :: f :: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Nil&lt;&#x2F;span&gt;&lt;span&gt;)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;To recap, each of the two methods will run a munit test that:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;write the &lt;code&gt;body&lt;&#x2F;code&gt; argument to a temporary file with the correct extension, prepending the correct &lt;code&gt;scala-cli&lt;&#x2F;code&gt; directives&lt;&#x2F;li&gt;
&lt;li&gt;run either the command &lt;code&gt;scala-cli run&lt;&#x2F;code&gt; or &lt;code&gt;scala-cli test&lt;&#x2F;code&gt; against the newly created file&lt;&#x2F;li&gt;
&lt;li&gt;use the exit code of the process to establish if the test is passed or not&lt;&#x2F;li&gt;
&lt;li&gt;delete the temporary file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The &lt;strong&gt;produced files&lt;&#x2F;strong&gt; will look, for example, like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using scala 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using toolkit typelevel:typelevel:0.1.14-29-d717826-20231004T153011Z-SNAPSHOT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using platform jvm
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IOApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Simple&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.println(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello toolkit!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;where &lt;code&gt;0.1.14-29-d717826-20231004T153011Z-SNAPSHOT&lt;&#x2F;code&gt; is the version of the toolkit that was just &lt;strong&gt;published&lt;&#x2F;strong&gt; locally by sbt.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;test-writing&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#test-writing&quot;&gt;Test writing&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;It was then &lt;strong&gt;Time to write and run the actual tests!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; ToolkitTests.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;munit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CatsEffectSuite
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;buildinfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;BuildInfo&lt;&#x2F;span&gt;&lt;span&gt;.scala3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ScalaCliTest&lt;&#x2F;span&gt;&lt;span&gt;.{testRun, testTest}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ToolkitTests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CatsEffectSuite &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  testRun(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Toolkit should run a simple Hello Cats Effect&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(scala3)
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|import cats.effect.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |object Hello extends IOApp.Simple:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |  def run = IO.println(&amp;quot;Hello toolkit!&amp;quot;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|import cats.effect._
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |object Hello extends IOApp.Simple {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |  def run = IO.println(&amp;quot;Hello toolkit!&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  testTest(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Toolkit should execute a simple munit suite&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(scala3)
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|import cats.effect.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |import munit.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |class Test extends CatsEffectSuite:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |  test(&amp;quot;test&amp;quot;)(IO.unit)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|import cats.effect._
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |import munit._
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |class Test extends CatsEffectSuite {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |  test(&amp;quot;test&amp;quot;)(IO.unit)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;         |}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The little testing framework we wrote is now capable of both running and testing &lt;code&gt;scala-cli&lt;&#x2F;code&gt; scripts that use the typelevel toolkit, and it will test it in every platform and scala version. &lt;code&gt;sbt test&lt;&#x2F;code&gt; will now publish both the toolkit and the test toolkit, for every platform, right before running the unit tests, achieving in this way a complete coverage and adding reliability to our releases! 🎉&lt;&#x2F;p&gt;
&lt;p&gt;And all of this was done without even touching our GitHub Actions, just with some &lt;code&gt;sbt&lt;&#x2F;code&gt;&lt;em&gt;-fu&lt;&#x2F;em&gt;, and &lt;strong&gt;just using the libraries that are included in the toolkit itself&lt;&#x2F;strong&gt; 😎&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Writing a GitHub Action with Scala.js</title>
          <pubDate>Thu, 18 May 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://toniogela.dev/gh-action-in-scala/</link>
          <guid>https://toniogela.dev/gh-action-in-scala/</guid>
          <description xml:base="https://toniogela.dev/gh-action-in-scala/">&lt;p&gt;Some months ago, I discussed with a DevOps colleague the need for a custom GitHub Action at &lt;code&gt;$work&lt;&#x2F;code&gt;. The action we needed had to perform many tasks that weren&#x27;t present in any action we could find, so we planned to write our own.&lt;&#x2F;p&gt;
&lt;p&gt;The chances were limited: there was the evergreen option to embed a &lt;strong&gt;gigantic shell script&lt;&#x2F;strong&gt; in the ci file (dealing with evergreen problems like escaping, quoting and indentation), the also evergreen option to &lt;strong&gt;commit the script&lt;&#x2F;strong&gt;, or we could have written our &lt;strong&gt;own GitHub action&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The last option was the most interesting one. Writing business logic in a more structured language than bash was desirable, but we had to face the fact that, according to the documentation, only two &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;creating-actions&#x2F;about-custom-actions#types-of-actions&quot;&gt;types of actions&lt;&#x2F;a&gt; exist (if you don&#x27;t consider composite ones): &lt;code&gt;Docker Container Actions&lt;&#x2F;code&gt; and &lt;code&gt;Javascript Actions&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Since no one had any intention whatsoever to write javascript code and &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;creating-actions&#x2F;creating-a-docker-container-action&quot;&gt;Docker Container Actions&lt;&#x2F;a&gt; had all the features we needed, we resorted to using one of them (despite their limitations in terms of compatibility).&lt;&#x2F;p&gt;
&lt;p&gt;Even though this &lt;u&gt;scarcely interesting success story&lt;&#x2F;u&gt; has a happy ending, a question emerged during the developments: &lt;code&gt;Is it possible to write a Github Action with Scala.js?&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Also, I asked myself &lt;code&gt;Is it still possible to survive as a software developer in 2023 without ever having written a single line of javascript?&lt;&#x2F;code&gt;: you&#x27;ll find the answer below.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TLDR&lt;&#x2F;strong&gt;: yes and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;armanbilge&quot;&gt;@armanbilge&lt;&#x2F;a&gt; did it in a couple of repositories like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;typelevel&#x2F;await-cirrus&quot;&gt;this one&lt;&#x2F;a&gt;, so in this post, we&#x27;ll dissect his approach to create a how-to guide. Thank you, Arman! ❤️&lt;&#x2F;p&gt;
&lt;h2 id=&quot;creating-a-simple-action&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#creating-a-simple-action&quot;&gt;Creating a simple action&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The action we&#x27;ll create will be a &lt;strong&gt;simple adder&lt;&#x2F;strong&gt; that will &lt;code&gt;sum up two numbers&lt;&#x2F;code&gt; that can be either defined in the build file or one of the results of one of the previous steps.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;metadata&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#metadata&quot;&gt;Metadata&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;According to its &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;creating-actions&#x2F;metadata-syntax-for-github-actions&quot;&gt;metadata syntax&lt;&#x2F;a&gt; page, every action defined in a repository requires an &lt;code&gt;action.yml&lt;&#x2F;code&gt; file that describes your action&#x27;s inputs, outputs and run configuration.&lt;&#x2F;p&gt;
&lt;p&gt;Our action will have two required inputs and a single output, and it will run using node 16:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; style=&quot;background-color:#6d98ba;color:black;&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; action.yml
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Scala.js adder&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Summing two numbers, but with Scala.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number-one&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The first number&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;required&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number-two&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The second number&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;required&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outputs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The sum of the two inputs&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;using&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;node16&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index.js&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;h3 id=&quot;business-logic-requirements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#business-logic-requirements&quot;&gt;Business logic requirements&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Once the metadata file is defined, we&#x27;ll have to write the business logic, but we need to address a few issues:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How do we produce a runnable js file?&lt;&#x2F;li&gt;
&lt;li&gt;How do we read the action&#x27;s inputs?&lt;&#x2F;li&gt;
&lt;li&gt;How do we write the action&#x27;s outputs?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The most straightforward and potent tool that will produce &lt;u&gt;javascript code from a single Scala file&lt;&#x2F;u&gt; is undoubtedly &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;VirtusLab&#x2F;scala-cli&quot;&gt;&lt;code&gt;scala-cli&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, with its ability to define in a few lines packaging, platform and dependencies setting.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s create in our repository a scala file with the required settings to produce a js module using a specific js and scala version:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; index.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using scala &amp;quot;3.2.2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using platform &amp;quot;js&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using jsVersion &amp;quot;1.13.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using jsModuleKind &amp;quot;common&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    println(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Packaging this file is as simple as running the command &lt;code&gt;scala-cli --power package -f index.scala&lt;&#x2F;code&gt; (we&#x27;ll reuse this command later in our CI). This command will produce an &lt;code&gt;index.js&lt;&#x2F;code&gt; file that can run locally using &lt;code&gt;node .&#x2F;index.js&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Now that we can produce a runnable js file, it&#x27;s time to create an actual GitHub action. The &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;creating-actions&#x2F;creating-a-javascript-action&quot;&gt;official documentation for javascript actions&lt;&#x2F;a&gt; recommends using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;toolkit&quot;&gt;&lt;code&gt;GitHub Actions Toolkit Node.js module&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to speed up development (an intelligent person will probably use it,) but the Actions&#x27; runtime offers an alternative.&lt;&#x2F;p&gt;
&lt;p&gt;Digging deep into the metadata syntax documentation, in the &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;creating-actions&#x2F;metadata-syntax-for-github-actions#inputs&quot;&gt;inputs&lt;&#x2F;a&gt; section, you&#x27;ll find an interesting paragraph:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When you specify an input in a workflow file or use a default input value, GitHub creates an environment variable for the input with the name &lt;code&gt;INPUT_&amp;lt;VARIABLE_NAME&amp;gt;&lt;&#x2F;code&gt;. The environment variable created converts input names to uppercase letters and replaces spaces with &lt;code&gt;_&lt;&#x2F;code&gt; characters.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;So to get our input parameters, reading the environment variables &lt;code&gt;INPUT_NUMBER-ONE&lt;&#x2F;code&gt; and &lt;code&gt;INPUT_NUMBER-TWO&lt;&#x2F;code&gt; will be enough.&lt;&#x2F;p&gt;
&lt;p&gt;Last but not least, we need to find a way to define our action&#x27;s output. Picking up the shovel again and digging further into the documentation, we&#x27;ll discover &lt;a href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;actions&#x2F;using-jobs&#x2F;defining-outputs-for-jobs&quot;&gt;a section&lt;&#x2F;a&gt; that enlightens us about the existence of a &lt;code&gt;GITHUB_OUTPUT&lt;&#x2F;code&gt; environment variable containing a file&#x27;s path. This file will serve as an output buffer for the currently running step, and using it is as simple as writing the string &lt;code&gt;&amp;lt;output_variable_name&amp;gt;=&amp;lt;value&amp;gt;&lt;&#x2F;code&gt; in it.&lt;&#x2F;p&gt;
&lt;p&gt;In our case, we&#x27;ll have to write &lt;code&gt;result=&amp;lt;sum of the inputs&amp;gt;&lt;&#x2F;code&gt; in the file at path &lt;code&gt;$GITHUB_OUTPUT&lt;&#x2F;code&gt;, and we&#x27;ll be done.&lt;&#x2F;p&gt;
&lt;p&gt;To sum up, we need a library&#x2F;framework&#x2F;stack that offers comfy APIs to read the content of environment variables and write stuff into files that have been compiled for Scala.js.&lt;&#x2F;p&gt;
&lt;p&gt;Unluckily the Scala standard library won&#x27;t be enough even for such a simple task (unless you&#x27;ll manually call some node.js APIs). If only there was &lt;strong&gt;a tech stack offering a resource-safe, referentially transparent way to perform these operations and a nice asynchronous API to call other processes, like other command line tools&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;typelevel-toolkit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#typelevel-toolkit&quot;&gt;Typelevel toolkit&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Luckily for everybody, such a stack exists. The &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;&quot;&gt;Typelevel&lt;&#x2F;a&gt; libraries are published for many Scala versions and for every platform Scala supports, including &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;platforms&#x2F;native&#x2F;&quot;&gt;Scala native&lt;&#x2F;a&gt;. &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;platforms&#x2F;js&#x2F;&quot;&gt;Most of them&lt;&#x2F;a&gt; can be used in a node.js action.&lt;&#x2F;p&gt;
&lt;p&gt;The most straightforward way to test this stack&#x27;s fundamental libraries is using the Typelevel toolkit. The toolkit is a meta library that includes (among the others) &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;Cats Effect&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;#&#x2F;io&quot;&gt;fs2-io&lt;&#x2F;a&gt; for streaming, &lt;a href=&quot;https:&#x2F;&#x2F;ben.kirw.in&#x2F;decline&#x2F;effect.html&quot;&gt;a library to parse command line arguments&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;circe.github.io&#x2F;circe&#x2F;&quot;&gt;a JSON serde that supports automatic Scala 3 derivation&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;http4s.org&#x2F;v0.23&#x2F;docs&#x2F;client.html&quot;&gt;an HTTP client&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To use the toolkit, it&#x27;s enough to declare it as a dependency in our scala-cli script:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; index.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using scala &amp;quot;3.2.2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using platform &amp;quot;js&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using jsVersion &amp;quot;1.13.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using jsModuleKind &amp;quot;common&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using dep &amp;quot;org.typelevel::toolkit::latest.release&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;App&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    println(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now it&#x27;s time to write an input reading function: we can use &lt;code&gt;cats.effect.std.Env&lt;&#x2F;code&gt; to access the environment variables&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.std.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Env
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getInput&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]] =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;INPUT_&lt;&#x2F;span&gt;&lt;span&gt;${input.toUpperCase.replace(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;#39;_&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the same method, we can get the output file path and write the output in it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.io.file.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;outputFile&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].get(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GITHUB_OUTPUT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).map(_.get).map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;.apply) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unsafe Option.get
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setOutput&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  outputFile.flatMap(path =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;${name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;${value}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      .through(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].writeUtf8(path))
&lt;&#x2F;span&gt;&lt;span&gt;      .compile
&lt;&#x2F;span&gt;&lt;span&gt;      .drain
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Last but not least, we can write the logic of our application:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IOApp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IOApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Simple&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    number1 &amp;lt;- getInput(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number-one&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).map(_.get.toInt) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unsafe
&lt;&#x2F;span&gt;&lt;span&gt;    number2 &amp;lt;- getInput(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number-two&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).map(_.get.toInt) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unsafe
&lt;&#x2F;span&gt;&lt;span&gt;    _ &amp;lt;- setOutput(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;${number1 + number2}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The whole action implementation will then be&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; index.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using scala &amp;quot;3.2.2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using platform &amp;quot;js&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using jsVersion &amp;quot;1.13.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using jsModuleKind &amp;quot;common&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using dep &amp;quot;org.typelevel::toolkit::latest.release&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IOApp&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.std.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Env
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.io.file.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getInput&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Option&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;]] =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].get(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;INPUT_&lt;&#x2F;span&gt;&lt;span&gt;${input.toUpperCase.replace(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;&amp;#39;_&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;outputFile&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Env&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].get(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GITHUB_OUTPUT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).map(_.get).map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;.apply) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unsafe Option.get
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setOutput&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Unit&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  outputFile.flatMap(path =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;${name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;${value}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      .through(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].writeUtf8(path))
&lt;&#x2F;span&gt;&lt;span&gt;      .compile
&lt;&#x2F;span&gt;&lt;span&gt;      .drain
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;IOApp&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Simple&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    number1 &amp;lt;- getInput(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number-one&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).map(_.get.toInt) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unsafe Option.get
&lt;&#x2F;span&gt;&lt;span&gt;    number2 &amp;lt;- getInput(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number-two&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).map(_.get.toInt) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; unsafe Option.get
&lt;&#x2F;span&gt;&lt;span&gt;    _ &amp;lt;- setOutput(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;${number1 + number2}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;details&gt;
&lt;summary&gt;Safer and shorter alternative that uses decline&lt;&#x2F;summary&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; index.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using scala &amp;quot;3.2.2&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using platform &amp;quot;js&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using jsVersion &amp;quot;1.13.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using jsModuleKind &amp;quot;common&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using dep &amp;quot;org.typelevel::toolkit::latest.release&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.syntax.all.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.io.file.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;com.monovore.decline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;com.monovore.decline.effect.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CommandIOApp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args &lt;&#x2F;span&gt;&lt;span&gt;= (
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;.env[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;](&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;INPUT_NUMBER-ONE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The first number&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;.env[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Int&lt;&#x2F;span&gt;&lt;span&gt;](&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;INPUT_NUMBER-TWO&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The second number&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;),
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;.env[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;GITHUB_OUTPUT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The file of the output&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).map(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Path&lt;&#x2F;span&gt;&lt;span&gt;.apply)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CommandIOApp&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;adder&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Summing two numbers&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span&gt;= args.mapN { (one, two, path) =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;result=&lt;&#x2F;span&gt;&lt;span&gt;${one + two}&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      .through(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Files&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].writeUtf8(path))
&lt;&#x2F;span&gt;&lt;span&gt;      .compile
&lt;&#x2F;span&gt;&lt;span&gt;      .drain
&lt;&#x2F;span&gt;&lt;span&gt;      .as(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Success&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;details&gt;
&lt;p&gt;Now that the logic is in place, we must produce a &lt;code&gt;.js&lt;&#x2F;code&gt; file and &lt;strong&gt;commit it&lt;&#x2F;strong&gt; in the repo, as the action runtime won&#x27;t interpret our Scala code. Scala-cli helps us: running &lt;code&gt;scala-cli --power package -f index.scala&lt;&#x2F;code&gt; produces an &lt;code&gt;index.js&lt;&#x2F;code&gt; file that our action can run.&lt;&#x2F;p&gt;
&lt;p&gt;The content of our repository should now be this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;tree&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-tree &quot;&gt;&lt;code class=&quot;language-tree&quot; data-lang=&quot;tree&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; action.yml
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; index.js
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; index.scala
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s time to check if our action work as intended.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;testing-never-hurts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#testing-never-hurts&quot;&gt;Testing never hurts&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;There are a few ways to test if an action you&#x27;re developing works as intended. The best one is probably using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nektos&#x2F;act&quot;&gt;act&lt;&#x2F;a&gt;, as the feedback cycle will be shorter. Sadly, the last time I checked &lt;code&gt;sbt&lt;&#x2F;code&gt; (and possibly &lt;code&gt;scala-cli&lt;&#x2F;code&gt;) was included only in the complete runtime image, requiring you to download the whole ~20GB container image.&lt;&#x2F;p&gt;
&lt;p&gt;The quickest way to test the action is to run it directly on the GitHub Runners and set up its CI to test the logic: the only required thing is a workflow file under &lt;code&gt;.github&#x2F;workflows&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As we must commit the transpiled version of our source code, a preliminary check that the &lt;code&gt;.js&lt;&#x2F;code&gt; file corresponds to the source &lt;code&gt;.scala&lt;&#x2F;code&gt; file is a good idea. The easiest way to test that they match is to recompile the &lt;code&gt;.scala&lt;&#x2F;code&gt; file with scala-cli and use the good old &lt;code&gt;git diff&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;check-js-file&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;checkout@v3                     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Checking out our code
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;setup-java@v3
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distribution&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;temurin
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;java-version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;coursier&#x2F;cache-action@v6
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;VirtusLab&#x2F;scala-cli-setup@main          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Installing scala-cli
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scala-cli --power package -f index.scala &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Recompiling our code
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;git diff --quiet index.js                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Silently failing if there&amp;#39;s any difference
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;One thing to consider is that we used &lt;code&gt;latest.release&lt;&#x2F;code&gt; as the toolkit version, making our build non reproducible. Pinning the dependencies&#x27; versions is usually a good idea. To achieve reproducibility is possible to pin a specific scala-cli version too using &lt;code&gt;--cli-version &amp;lt;version&amp;gt;&lt;&#x2F;code&gt;. Also, pinning each action version (i.e. &lt;code&gt;- uses:VirtusLab&#x2F;scala-cli-setup@v1.0.0-RC2&lt;&#x2F;code&gt;) might decrease the chances that your CI will produce a different js file (and thus failing) in the future.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Once sure that the transpiled version of our code is correct, we can run our action and test its output directly in its own CI:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test-action-itself&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;needs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;check-js-file                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# There&amp;#39;s no point in testing the wrong version
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;checkout@v3
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Here we&amp;#39;ll use the action itself
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-gh-action
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number-one&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number-two&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;span&gt;    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test 12 -eq &amp;quot;${{ steps.test-gh-action.outputs.result }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last action uses the good old &lt;code&gt;test&lt;&#x2F;code&gt; command (aka &lt;code&gt;[&lt;&#x2F;code&gt;) to check the action&#x27;s output for the specified inputs.&lt;&#x2F;p&gt;
&lt;details&gt;
&lt;summary&gt;Complete CI file&lt;&#x2F;summary&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; style=&quot;background-color:#a3be8c;color:#1a2539;&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; .github&amp;#x2F;workflows&amp;#x2F;ci.yml
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Continuos Integration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pull_request&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span&gt;: [&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!update&#x2F;**&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!pr&#x2F;**&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jobs&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;check-js-file&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;checkout@v3
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;setup-java@v3
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distribution&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;temurin
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;java-version&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;coursier&#x2F;cache-action@v6
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;VirtusLab&#x2F;scala-cli-setup@main
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;scala-cli --power --cli-version 1.0.0-RC2 package -f index.scala
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;git diff --quiet index.js
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test-action-itself&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;needs&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;check-js-file
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ubuntu-latest
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;steps&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;actions&#x2F;checkout@v3
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test-gh-action
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number-one&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number-two&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;span&gt;      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test 12 -eq &amp;quot;${{ steps.test-gh-action.outputs.result }}&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;&lt;&#x2F;details&gt;
&lt;h3 id=&quot;using-the-action&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#using-the-action&quot;&gt;Using the action&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;To let the world use your new and shiny Scala.js-powered GitHub Action, commit every mentioned file in a public repository, let&#x27;s say &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TonioGela&#x2F;test-gh-action&quot;&gt;&lt;code&gt;TonioGela&#x2F;test-gh-action&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and use the repository slug in every other action on the whole GitHub:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;  - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sum numbers with Scala
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;this-is-the-id
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TonioGela&#x2F;test-gh-action@main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# specify a branch name, a version or a commit sha
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number-one&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number-two&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;further-considerations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#further-considerations&quot;&gt;Further considerations&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;The example in this post is meant to show how to use a combination of tools and libraries to create a Github Action and doesn&#x27;t show the true power of the Typelevel stack. A recent addition to &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;#&#x2F;io&quot;&gt;fs2-io&lt;&#x2F;a&gt; that can be handy in the context of an action might be the &lt;a href=&quot;https:&#x2F;&#x2F;fs2.io&#x2F;#&#x2F;io?id=processes&quot;&gt;Processes APIs&lt;&#x2F;a&gt;, with whom you can invoke external commands&#x2F;tools handling their stdin, stdout, and exit codes:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Concurrent&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MonadCancelThrow&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.io.process.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Processes&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProcessBuilder&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;fs2.text
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;helloProcess&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[_]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Concurrent&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Processes&lt;&#x2F;span&gt;&lt;span&gt;]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ProcessBuilder&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, process!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).spawn.use { process =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    process.stdout.through(text.utf8.decode).compile.string
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The toolkit includes the &lt;code&gt;Ember&lt;&#x2F;code&gt; client and its &lt;code&gt;circe&lt;&#x2F;code&gt; integration, with whom you can easily call any external service and deserialize its output in a case class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.syntax.all.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;io.circe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Decoder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.circe.jsonOf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;EntityDecoder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.ember.client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;EmberClientBuilder
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span&gt;(bar:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;derives &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Decoder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;given &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;EntityDecoder&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span&gt;] = jsonOf[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;EmberClientBuilder&lt;&#x2F;span&gt;&lt;span&gt;.default[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;].build.use { client =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    client.expect[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;foo.bar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).flatMap(foo =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.println(foo))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The toolkit&#x27;s site contains a &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;toolkit&#x2F;examples.html&quot;&gt;few examples&lt;&#x2F;a&gt; of what you can do with it. Go take a look 😄&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusions&quot;&gt;Conclusions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Despite being a bit unripe, I find this approach fascinating and easy to use (in particular if you don&#x27;t know any &lt;code&gt;js&lt;&#x2F;code&gt; in 2023 😇).&lt;&#x2F;p&gt;
&lt;p&gt;In the future, I might consider rewriting in Scala.js the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actions&#x2F;toolkit&quot;&gt;actions&#x2F;toolkit&lt;&#x2F;a&gt; library or a part of it (I might have to learn javascript 🤦). If you want to contribute, feel free to &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;users&#x2F;372358874243661825&quot;&gt;contact me&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;One thing that&#x27;s worth exploring is the interaction with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;scala-steward-org&#x2F;scala-steward&quot;&gt;Scala-Steward&lt;&#x2F;a&gt;. Can the CI be set up to re-generate the js and commit the result? Probably yes, with &lt;code&gt;postUpdateHooks&lt;&#x2F;code&gt;. Is it desirable? I&#x27;m still not sure.&lt;&#x2F;p&gt;
&lt;p&gt;You&#x27;ll find the code written in the post in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TonioGela&#x2F;test-gh-action&quot;&gt;this repository&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Deploy http4s on your domain with fly.io</title>
          <pubDate>Mon, 09 Jan 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://toniogela.dev/http4s-on-fly-io/</link>
          <guid>https://toniogela.dev/http4s-on-fly-io/</guid>
          <description xml:base="https://toniogela.dev/http4s-on-fly-io/">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;&#x2F;strong&gt;: This article assumes some familiarity with the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;&quot;&gt;Typelevel&lt;&#x2F;a&gt;&#x27;s tech stack, &lt;a href=&quot;https:&#x2F;&#x2F;http4s.org&#x2F;&quot;&gt;http4s&lt;&#x2F;a&gt; in particular.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s plenty of &lt;strong&gt;good resources&lt;&#x2F;strong&gt; to read online to get started with, some of them being &lt;a href=&quot;https:&#x2F;&#x2F;underscore.io&#x2F;books&#x2F;scala-with-cats&#x2F;&quot;&gt;Scala with Cats&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;essentialeffects.dev&#x2F;&quot;&gt;Essential Effects&lt;&#x2F;a&gt; and the &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats-effect&#x2F;&quot;&gt;Cats Effect&lt;&#x2F;a&gt; documentation.
The &lt;strong&gt;best and most comprehensive resource&lt;&#x2F;strong&gt; you&#x27;ll find to develop a microservice using this stack is &lt;a href=&quot;https:&#x2F;&#x2F;leanpub.com&#x2F;pfp-scala&quot;&gt;Practical FP in Scala&lt;&#x2F;a&gt;, that I strongly suggest reading.&lt;&#x2F;p&gt;
&lt;p&gt;If you need &lt;strong&gt;help&lt;&#x2F;strong&gt; with any of these resources feel free to contact me or better ask questions in the &lt;a href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;invite&#x2F;XF3CXcMzqD&quot;&gt;Typelevel&#x27;s Discord&lt;&#x2F;a&gt;. You&#x27;ll find &lt;strong&gt;an amazing and kind community&lt;&#x2F;strong&gt; of really &lt;strong&gt;talented&lt;&#x2F;strong&gt; people that will be glad to answer to your questions 😄&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;If you already own a domain, deploying a toy server or any personal &lt;em&gt;server-shaped&lt;&#x2F;em&gt; project on it should not be a complex operation. Using &lt;a href=&quot;https:&#x2F;&#x2F;fly.io&#x2F;&quot;&gt;fly.io&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;scala-cli.virtuslab.org&#x2F;&quot;&gt;scala-cli&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;http4s.org&#x2F;&quot;&gt;http4s&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just&quot;&gt;just&lt;&#x2F;a&gt; can help automatise the process and reduce the friction up to the point it might even be fun.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;requirements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#requirements&quot;&gt;Requirements&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Before starting, we&#x27;ll need to set up a couple of things. Here&#x27;s the list:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Having&#x2F;buying a &lt;strong&gt;custom domain&lt;&#x2F;strong&gt; and having access to its &lt;strong&gt;DNS settings page&lt;&#x2F;strong&gt;: I&#x27;m using &lt;a href=&quot;https:&#x2F;&#x2F;domains.google&#x2F;&quot;&gt;Google Domains&lt;&#x2F;a&gt; since the domains are cheap (most of them cost 12$ per year), but sadly it lacks support for ALIAS records.&lt;&#x2F;li&gt;
&lt;li&gt;Sign up on &lt;a href=&quot;https:&#x2F;&#x2F;fly.io&#x2F;&quot;&gt;fly.io&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;toniogela.dev&#x2F;http4s-on-fly-io&#x2F;(https:&#x2F;&#x2F;fly.io&#x2F;docs&#x2F;hands-on&#x2F;install-flyctl&#x2F;)&quot;&gt;install&lt;&#x2F;a&gt; its command line tool &lt;strong&gt;&lt;code&gt;flyctl&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt; and log in using &lt;code&gt;flyctl auth login&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Of course&lt;&#x2F;strong&gt;, a local installation of &lt;a href=&quot;https:&#x2F;&#x2F;scala-cli.virtuslab.org&#x2F;&quot;&gt;scala-cli&lt;&#x2F;a&gt; (Here&#x27;s me talking about it on the &lt;a href=&quot;https:&#x2F;&#x2F;blog.rockthejvm.com&#x2F;scala-cli-and-scala-native&#x2F;&quot;&gt;Rock The JVM blog&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Optionally the command line tool &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just&quot;&gt;&lt;code&gt;just&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; that I &lt;strike&gt;recently&lt;&#x2F;strike&gt; reviewed &lt;a href=&quot;https:&#x2F;&#x2F;toniogela.dev&#x2F;just&#x2F;&quot;&gt;in another article&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;writing-the-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#writing-the-application&quot;&gt;Writing the application&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Writing a hello-world-spitting server with http4s using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;http4s&#x2F;http4s.g8&quot;&gt;its giter8 template&lt;&#x2F;a&gt; and sbt it&#x27;s a trivial task.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, we&#x27;ll write it manually, using scala-cli and adding a slightly less trivial business logic. To begin, we&#x27;ll create a file containing a few scala-cli directives to declare the dependencies and the scala version:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using scala &amp;quot;3.2.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using lib &amp;quot;org.http4s::http4s-ember-server::0.23.17&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using lib &amp;quot;org.http4s::http4s-dsl::0.23.17&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using lib &amp;quot;com.monovore::decline-effect::2.4.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using lib &amp;quot;ch.qos.logback:logback-classic:1.4.5&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The server will read two environment variables, a mandatory one for the base URL and one for the title of the HTML pages to return. We&#x27;ll use &lt;a href=&quot;https:&#x2F;&#x2F;ben.kirw.in&#x2F;decline&#x2F;&quot;&gt;decline&lt;&#x2F;a&gt; to define them and use them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.syntax.all.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;com.monovore.decline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;com.monovore.decline.effect.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CommandIOApp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CommandIOApp&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;helloServer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Greets you in HTML&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;titleOpt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;.env[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TITLE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Page title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).withDefault(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baseUrlOpt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts
&lt;&#x2F;span&gt;&lt;span&gt;    .env[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BASE_URL&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The base url&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .mapValidated(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri
&lt;&#x2F;span&gt;&lt;span&gt;        .fromString(_)
&lt;&#x2F;span&gt;&lt;span&gt;        .leftMap(_.message)
&lt;&#x2F;span&gt;&lt;span&gt;        .ensure(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;base url must be absolute&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)(_.path.addEndsWithSlash.absolute)
&lt;&#x2F;span&gt;&lt;span&gt;        .map(uri =&amp;gt; uri.withPath(uri.path.dropEndsWithSlash))
&lt;&#x2F;span&gt;&lt;span&gt;        .toValidatedNel
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;]] = (baseUrlOpt, titleOpt).mapN((baseUrl, title) =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;.println(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;$baseUrl $title&amp;quot;).as(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Success&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The application prints the environment variables&#x27; content, validates the base URL&#x27;s content and adds a default for &lt;code&gt;TITLE&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To add some business logic to the soon-to-be server, we&#x27;ll add a pure function that builds a tiny HTML page, and we&#x27;ll use it in our &lt;code&gt;routes&lt;&#x2F;code&gt; implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.kernel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HttpRoutes&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MediaType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.dsl.io.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.headers.`Content-Type`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|&amp;lt;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      |&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;$title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;title&amp;gt;&amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      |&amp;lt;body&amp;gt;Hello from &lt;&#x2F;span&gt;&lt;span&gt;${uri.toString}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;      |&amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;.stripMargin
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;routes&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[_]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Async&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baseUrl&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HttpRoutes&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HttpRoutes&lt;&#x2F;span&gt;&lt;span&gt;.of[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GET &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Root &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;).pure[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GET &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; path =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          .withEntity(page(baseUrl.withPath(baseUrl.path.merge(path)), title))
&lt;&#x2F;span&gt;&lt;span&gt;          .withContentType(`Content-Type`(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MediaType&lt;&#x2F;span&gt;&lt;span&gt;.text.html))
&lt;&#x2F;span&gt;&lt;span&gt;          .pure[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The simple logic consists in printing the absolute URL of the page that was requested to the server, plus a health check endpoint.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ll add some logging to our &lt;code&gt;routes&lt;&#x2F;code&gt; leveraging &lt;code&gt;log4cats&lt;&#x2F;code&gt; and &lt;code&gt;slf4j&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;diff&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-diff &quot;&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span&gt; import org.typelevel.log4cats.Logger
&lt;&#x2F;span&gt;&lt;span&gt; import org.typelevel.log4cats.slf4j.*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+def routes[F[_]: Async: Logger](baseUrl: Uri, title: String): HttpRoutes[F] =
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-def routes[F[_]: Async](baseUrl: Uri, title: String): HttpRoutes[F] =
&lt;&#x2F;span&gt;&lt;span&gt;   HttpRoutes.of[F] {
&lt;&#x2F;span&gt;&lt;span&gt;     case GET -&amp;gt; Root &#x2F; &amp;quot;health&amp;quot; =&amp;gt; Response[F](Status.Ok).pure[F]
&lt;&#x2F;span&gt;&lt;span&gt;     case GET -&amp;gt; path =&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+      Logger[F].info(s&amp;quot;Serving $path&amp;quot;) &amp;gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;         Response[F](Status.Ok)
&lt;&#x2F;span&gt;&lt;span&gt;           .withEntity(page(baseUrl.withPath(baseUrl.path.merge(path)), title))
&lt;&#x2F;span&gt;&lt;span&gt;           .withContentType(`Content-Type`(MediaType.text.html))
&lt;&#x2F;span&gt;&lt;span&gt;           .pure[F]
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Our logging backend will be &lt;code&gt;logback&lt;&#x2F;code&gt;, which we&#x27;ll configure by adding a &lt;code&gt;logback.xml&lt;&#x2F;code&gt; file in our current directory:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; style=&quot;background-color:#a3be8c;color:#1a2539;&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; logback.xml
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configuration &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;debug&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appender &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;STDOUT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ch.qos.logback.core.ConsoleAppender&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encoder&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pattern&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                %d{ISO8601} [%-4level] %logger{0}: %msg%n
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pattern&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encoder&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appender&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;org.http4s.ember.server&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ERROR&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;level&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;INFO&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;appender-ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;STDOUT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configuration&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;What is lacking now is the logger and server instantiation in our &lt;code&gt;main&lt;&#x2F;code&gt; method. Adding it will finally complete our implementation:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; server.scala
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;scala&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-scala &quot;&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using scala &amp;quot;3.2.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using resourceDir &amp;quot;.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using packaging.packageType &amp;quot;assembly&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using lib &amp;quot;org.http4s::http4s-ember-server::0.23.17&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using lib &amp;quot;org.http4s::http4s-dsl::0.23.17&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using lib &amp;quot;com.monovore::decline-effect::2.4.1&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;&amp;gt; using lib &amp;quot;ch.qos.logback:logback-classic:1.4.5&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.effect.kernel.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Async
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cats.syntax.all.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;com.comcast.ip4s.{ipv4, port}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;com.monovore.decline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;com.monovore.decline.effect.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CommandIOApp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HttpRoutes&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MediaType&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.dsl.io.*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.ember.server.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;EmberServerBuilder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.headers.`Content-Type`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.http4s.server.middleware.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CORS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.typelevel.log4cats.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Logger
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;org.typelevel.log4cats.slf4j.*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CommandIOApp&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;helloServer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Titles you in HTML&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;titleOpt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;.env[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TITLE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Page title&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).withDefault(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baseUrlOpt&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts
&lt;&#x2F;span&gt;&lt;span&gt;    .env[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;](&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BASE_URL&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The base url&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    .mapValidated(
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri
&lt;&#x2F;span&gt;&lt;span&gt;        .fromString(_)
&lt;&#x2F;span&gt;&lt;span&gt;        .leftMap(_.message)
&lt;&#x2F;span&gt;&lt;span&gt;        .ensure(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;base url must be absolute&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)(_.path.addEndsWithSlash.absolute)
&lt;&#x2F;span&gt;&lt;span&gt;        .map(uri =&amp;gt; uri.withPath(uri.path.dropEndsWithSlash))
&lt;&#x2F;span&gt;&lt;span&gt;        .toValidatedNel
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;|&amp;lt;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        |&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;$title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;title&amp;gt;&amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        |&amp;lt;body&amp;gt;Hello from &lt;&#x2F;span&gt;&lt;span&gt;${uri.toString}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;        |&amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&amp;quot;.stripMargin
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;routes&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;[_]: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Async&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;baseUrl&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Uri&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HttpRoutes&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;] =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HttpRoutes&lt;&#x2F;span&gt;&lt;span&gt;.of[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;] {
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GET &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Root &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;health&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;).pure[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;GET &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; path =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;].info(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Serving &lt;&#x2F;span&gt;&lt;span&gt;$path&amp;quot;) &amp;gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Response&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;](&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Ok&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .withEntity(page(baseUrl.withPath(baseUrl.path.merge(path)), title))
&lt;&#x2F;span&gt;&lt;span&gt;            .withContentType(`Content-Type`(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MediaType&lt;&#x2F;span&gt;&lt;span&gt;.text.html))
&lt;&#x2F;span&gt;&lt;span&gt;            .pure[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;F&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Opts&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;]] = (baseUrlOpt, titleOpt).mapN((baseUrl, title) =&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;given &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Slf4jFactory&lt;&#x2F;span&gt;&lt;span&gt;.create[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;      exitCode &amp;lt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;EmberServerBuilder
&lt;&#x2F;span&gt;&lt;span&gt;        .default[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;        .withHttp2
&lt;&#x2F;span&gt;&lt;span&gt;        .withHost(ipv4&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.0.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .withPort(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .withHttpApp(
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CORS&lt;&#x2F;span&gt;&lt;span&gt;.policy.withAllowOriginAll(routes[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IO&lt;&#x2F;span&gt;&lt;span&gt;](baseUrl, title)).orNotFound
&lt;&#x2F;span&gt;&lt;span&gt;        )
&lt;&#x2F;span&gt;&lt;span&gt;        .build
&lt;&#x2F;span&gt;&lt;span&gt;        .useForever
&lt;&#x2F;span&gt;&lt;span&gt;        .as(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ExitCode&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Success&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield&lt;&#x2F;span&gt;&lt;span&gt; exitCode
&lt;&#x2F;span&gt;&lt;span&gt;  )
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We added &lt;code&gt;using resourceDir &quot;.&quot;&lt;&#x2F;code&gt; to make the file &lt;code&gt;logback.xml&lt;&#x2F;code&gt; discoverable by logback and &lt;code&gt;using packaging.packageType &quot;assembly&quot;&lt;&#x2F;code&gt; to pack our server with all its dependencies to avoid downloading them at every boot.&lt;&#x2F;p&gt;
&lt;p&gt;We can now perform a test running the server locally and visiting &lt;code&gt;localhost:8080&#x2F;foo&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ BASE_URL=&amp;quot;https:&#x2F;&#x2F;toniogela.dev&amp;quot; scala-cli run .
&lt;&#x2F;span&gt;&lt;span&gt;2023-01-07 23:46:39,183 [INFO] Server: Serving &#x2F;foo&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p style=&quot;text-align:center;line-height:0&quot;&gt;
    &lt;img src=&quot;local-test.webp&quot; style=&quot;width:50%;
               border-radius:0.5rem;
               &quot; alt=&quot;&quot;&gt;
&lt;&#x2F;p&gt;&lt;h3 id=&quot;packing-the-server-as-a-docker-application&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#packing-the-server-as-a-docker-application&quot;&gt;Packing the server as a docker application&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Last but not least, since fly.io accepts &lt;a href=&quot;https:&#x2F;&#x2F;fly.io&#x2F;docs&#x2F;reference&#x2F;builders&#x2F;#image&quot;&gt;already-built Docker images&lt;&#x2F;a&gt; to run, we should pack our application in a container. Luckily for us, scala-cli can directly package our server as a docker image &lt;a href=&quot;https:&#x2F;&#x2F;scala-cli.virtuslab.org&#x2F;docs&#x2F;commands&#x2F;package#building-docker-container-from-base-image&quot;&gt;using a custom base image&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ scala-cli package server.scala --docker --docker-image-repository hello-server --docker-image-tag 0.1.0 --docker-from eclipse-temurin:11.0.17_8-jre-alpine 
&lt;&#x2F;span&gt;&lt;span&gt;Compiling project (Scala 3.2.1, JVM)
&lt;&#x2F;span&gt;&lt;span&gt;Compiled project (Scala 3.2.1, JVM)
&lt;&#x2F;span&gt;&lt;span&gt;Started building docker image with your application, it might take some time
&lt;&#x2F;span&gt;&lt;span&gt;Built docker image, run it with
&lt;&#x2F;span&gt;&lt;span&gt;  docker run hello-server:0.1.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ docker run -e BASE_URL=&amp;quot;https:&#x2F;&#x2F;toniogela.dev&amp;quot; -p8080:8080 hello-server:0.1.0
&lt;&#x2F;span&gt;&lt;span&gt;2023-01-07 23:06:30,524 [INFO] Server: Serving &#x2F;foo&#x2F;ciao
&lt;&#x2F;span&gt;&lt;span&gt;2023-01-07 23:06:30,866 [INFO] Server: Serving &#x2F;favicon.ico
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since we&#x27;ll need to rebuild the app again and the command is quite long, we&#x27;ll write down a &lt;code&gt;Justfile&lt;&#x2F;code&gt; for ease:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; style=&quot;background-color:#6d98ba;color:black;&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; Justfile
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker_image_name &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello-server&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker_image_tag  &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base_image        &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;eclipse-temurin:11.0.17_8-jre-alpine&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just --list --unsorted
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Runs the app on localhost:8080
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  BASE_URL=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;hello.toniogela.dev&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; scala-cli run .
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Build the docker image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  scala-cli package server.scala --docker \
&lt;&#x2F;span&gt;&lt;span&gt;    --docker-image-repository {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker_image_name&lt;&#x2F;span&gt;&lt;span&gt;}} \
&lt;&#x2F;span&gt;&lt;span&gt;    --docker-image-tag {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker_image_tag&lt;&#x2F;span&gt;&lt;span&gt;}} \
&lt;&#x2F;span&gt;&lt;span&gt;    --docker-from {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base_image&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now rebuilding the app is as simple as running &lt;code&gt;just build&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just
&lt;&#x2F;span&gt;&lt;span&gt;Available recipes:
&lt;&#x2F;span&gt;&lt;span&gt;    run                 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Runs the app on localhost:8080
&lt;&#x2F;span&gt;&lt;span&gt;    build               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Build the docker image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just build
&lt;&#x2F;span&gt;&lt;span&gt;scala-cli package server.scala --docker --docker-image-repository hello-server --docker-image-tag 0.1.0 --docker-from eclipse-temurin:11.0.17_8-jre-alpine 
&lt;&#x2F;span&gt;&lt;span&gt;Compiling project (Scala 3.2.1, JVM)
&lt;&#x2F;span&gt;&lt;span&gt;Compiled project (Scala 3.2.1, JVM)
&lt;&#x2F;span&gt;&lt;span&gt;Started building docker image with your application, it might take some time
&lt;&#x2F;span&gt;&lt;span&gt;Built docker image, run it with
&lt;&#x2F;span&gt;&lt;span&gt;  docker run hello-server:0.1.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;deploying-the-server-or-fly-io&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#deploying-the-server-or-fly-io&quot;&gt;Deploying the server or fly.io&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Creating our app is as simple as launching a command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ fly launch --image hello-server:0.1.0 
&lt;&#x2F;span&gt;&lt;span&gt;Creating app in &#x2F;Users&#x2F;toniogela&#x2F;repo&#x2F;personal&#x2F;helloServer
&lt;&#x2F;span&gt;&lt;span&gt;Using image hello-server:0.1.0
&lt;&#x2F;span&gt;&lt;span&gt;? Choose an app name (leave blank to generate one): hello-toniogela
&lt;&#x2F;span&gt;&lt;span&gt;? Choose a region for deployment: Frankfurt, Germany (fra)
&lt;&#x2F;span&gt;&lt;span&gt;Admin URL: https:&#x2F;&#x2F;fly.io&#x2F;apps&#x2F;hello-toniogela
&lt;&#x2F;span&gt;&lt;span&gt;Hostname: hello-toniogela.fly.dev
&lt;&#x2F;span&gt;&lt;span&gt;Wrote config file fly.toml
&lt;&#x2F;span&gt;&lt;span&gt;? Would you like to set up a Postgresql database now? No
&lt;&#x2F;span&gt;&lt;span&gt;? Would you like to set up an Upstash Redis database now? No
&lt;&#x2F;span&gt;&lt;span&gt;? Would you like to deploy now? No
&lt;&#x2F;span&gt;&lt;span&gt;Your app is ready! Deploy with `flyctl deploy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One of the side effects of the last command execution is that &lt;code&gt;fly.toml&lt;&#x2F;code&gt; configuration file for our application gets generated. The default settings are usually fine, but we need at least to add under &lt;code&gt;env&lt;&#x2F;code&gt; our mandatory variable &lt;code&gt;BASE_URL&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I removed the &lt;code&gt;[[services.tcp_checks]]&lt;&#x2F;code&gt; in favour of a &lt;code&gt;[[services.http_checks]]&lt;&#x2F;code&gt; that calls our health check API, increased some concurrency limits and &lt;strong&gt;forced HTTPS traffic&lt;&#x2F;strong&gt;, all by following the &lt;a href=&quot;https:&#x2F;&#x2F;fly.io&#x2F;docs&#x2F;reference&#x2F;configuration&quot;&gt;configuration reference&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; style=&quot;background-color:#a3be8c;color:#1a2539;&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; fly.toml
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;toml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-toml &quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;app &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello-toniogela&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kill_signal &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SIGINT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;kill_timeout &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[env]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BASE_URL &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;hello.toniogela.dev&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[build]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello-server:0.1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[[services]]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;internal_port &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8080
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;processes &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;app&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;protocol &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  [services.concurrency]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hard_limit &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;soft_limit &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;250
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;requests&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  [[services.ports]]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;force_https &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handlers &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  [[services.ports]]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;handlers &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tls&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;443
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  [[services.http_checks]]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grace_period &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;interval &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;method &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;health&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;protocol &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;restart_limit &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;timeout &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Even deploying is just a matter of running a single command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ fly deploy --local-only
&lt;&#x2F;span&gt;&lt;span&gt;==&amp;gt; Verifying app config
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; Verified app config
&lt;&#x2F;span&gt;&lt;span&gt;==&amp;gt; Building image
&lt;&#x2F;span&gt;&lt;span&gt;Searching for image &amp;#39;hello-server:0.1.0&amp;#39; locally...
&lt;&#x2F;span&gt;&lt;span&gt;image found: sha256:9ffc712f96bb61eae722619ad0bd21a752e39b2a0cceca1abdb510bec18820cf
&lt;&#x2F;span&gt;&lt;span&gt;==&amp;gt; Pushing image to fly
&lt;&#x2F;span&gt;&lt;span&gt;The push refers to repository [registry.fly.io&#x2F;hello-toniogela]
&lt;&#x2F;span&gt;&lt;span&gt;6edf61a11a72: Pushed 
&lt;&#x2F;span&gt;&lt;span&gt;d5ee5e28f5b5: Pushed 
&lt;&#x2F;span&gt;&lt;span&gt;688df10214b7: Pushed 
&lt;&#x2F;span&gt;&lt;span&gt;5ab3fbcbc72f: Pushed 
&lt;&#x2F;span&gt;&lt;span&gt;ded7a220bb05: Pushed 
&lt;&#x2F;span&gt;&lt;span&gt;deployment-01GP7936X7ZMX5VXDS2MYM1C9D: digest: sha256:99b04cf901b057a10f2526e6f973285ffb09777e497cd6abd6d96c6cd73a6114 size: 1371
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; Pushing image done
&lt;&#x2F;span&gt;&lt;span&gt;==&amp;gt; Creating release
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; release v2 created
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; You can detach the terminal anytime without stopping the deployment
&lt;&#x2F;span&gt;&lt;span&gt;==&amp;gt; Monitoring deployment
&lt;&#x2F;span&gt;&lt;span&gt;Logs: https:&#x2F;&#x2F;fly.io&#x2F;apps&#x2F;hello-toniogela&#x2F;monitoring
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 1 desired, 1 placed, 1 healthy, 0 unhealthy [health checks: 1 total, 1 passing]
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; v0 deployed successfully
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;--local-only&lt;&#x2F;code&gt; flag was used to perform the build only locally using the local docker daemon and pushing the previously built image. We can now check that our app is reachable under &lt;code&gt;https:&#x2F;&#x2F;{appName}.fly.dev&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;p style=&quot;text-align:center;line-height:0&quot;&gt;
    &lt;img src=&quot;fly-domain.webp&quot; style=&quot;width:50%;
               border-radius:0.5rem;
               &quot; alt=&quot;&quot;&gt;
&lt;&#x2F;p&gt;&lt;h3 id=&quot;secrets&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#secrets&quot;&gt;Secrets&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Fly supports secret environment variables, and they can be easily set from the command line, triggering a redeploy:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ fly secrets set TITLE=&amp;quot;Mommy I&amp;#39;m online&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Release v1 created
&lt;&#x2F;span&gt;&lt;span&gt;==&amp;gt; Monitoring deployment
&lt;&#x2F;span&gt;&lt;span&gt;Logs: https:&#x2F;&#x2F;fly.io&#x2F;apps&#x2F;hello-toniogela&#x2F;monitoring
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt; 1 desired, 1 placed, 1 healthy, 0 unhealthy [health checks: 1 total, 1 passing]
&lt;&#x2F;span&gt;&lt;span&gt;--&amp;gt; v1 deployed successfully
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p style=&quot;text-align:center;line-height:0&quot;&gt;
    &lt;img src=&quot;custom-title.webp&quot; style=&quot;width:50%;
               border-radius:0.5rem;
               &quot; alt=&quot;&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;We can save these commands for later reuse in our &lt;code&gt;Justfile&lt;&#x2F;code&gt;, using dependencies between recipes and default arguments:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Deploys on fly.io
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;deploy&lt;&#x2F;span&gt;&lt;span&gt;: build
&lt;&#x2F;span&gt;&lt;span&gt;    flyctl deploy --local-only
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Changes the TITLE secret on fly.io
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt; label=&amp;quot;Hello&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    flyctl secrets set TITLE=&amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Opens the web UI of fly.io
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    open &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;fly.io&#x2F;apps&#x2F;hello-toniogela&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;adding-certificates-and-publishing-on-our-domain&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#adding-certificates-and-publishing-on-our-domain&quot;&gt;Adding certificates and publishing on our domain&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Now that we confirmed that the server is up and running, it&#x27;s time to make fly.io generate an HTTPS certificate and configure the DNS to expose the app on our domain. By default, fly.io assigns to every new app a shared ipv4 and a dedicated ipv6. This is due to a popularity increase and a global IPv4 scarcity, as &lt;a href=&quot;https:&#x2F;&#x2F;community.fly.io&#x2F;t&#x2F;announcement-shared-anycast-ipv4&#x2F;9384&quot;&gt;announced on the Fly.io blog&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If we still desire a dedicated IPv4, i.e. for using an A record in our DNS server, we can allocate one:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ fly ips allocate-v4
&lt;&#x2F;span&gt;&lt;span&gt;VERSION	IP           	TYPE  	REGION	CREATED AT
&lt;&#x2F;span&gt;&lt;span&gt;v4     	137.66.63.249	public	global	7s ago
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To generate an HTTPS certificate, we can always use the command line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ fly certs add hello.toniogela.dev
&lt;&#x2F;span&gt;&lt;span&gt;You are creating a certificate for hello.toniogela.dev
&lt;&#x2F;span&gt;&lt;span&gt;We are using Let&amp;#39;s Encrypt for this certificate.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;You can configure your DNS for hello.toniogela.dev by:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1: Adding an CNAME record to your DNS service which reads:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    CNAME hello. hello-toniogela.fly.dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To speed up the certificate creation, we can visit the dedicated section on our app dashboard and follow the instructions to confirm the domain ownership:&lt;&#x2F;p&gt;
&lt;p style=&quot;text-align:center;line-height:0&quot;&gt;
    &lt;img src=&quot;certificates-instruction.webp&quot; style=&quot;width:90%;
               border-radius:0.5rem;
               &quot; alt=&quot;&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;and setup at our domain&#x27;s vendor the DNS records as requested:&lt;&#x2F;p&gt;
&lt;p style=&quot;text-align:center;line-height:0&quot;&gt;
    &lt;img src=&quot;google-domains.webp&quot; style=&quot;width:90%;
               border-radius:0.5rem;
               &quot; alt=&quot;&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;After a few minutes, our DNS should be propagated. We can check the status via command line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ fly certs check hello.toniogela.dev
&lt;&#x2F;span&gt;&lt;span&gt;The certificate for hello.toniogela.dev has been issued.
&lt;&#x2F;span&gt;&lt;span&gt;Hostname                  = hello.toniogela.dev
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;DNS Provider              = googledomains
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Certificate Authority     = Let&amp;#39;s Encrypt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Issued                    = rsa,ecdsa
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Added to App              = 10 minutes ago
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Source                    = fly
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can enjoy our app directly from our domain 🎉🎉🎉&lt;&#x2F;p&gt;
&lt;p style=&quot;text-align:center;line-height:0&quot;&gt;
    &lt;img src=&quot;complete.webp&quot; style=&quot;width:50%;
               border-radius:0.5rem;
               &quot; alt=&quot;&quot;&gt;
&lt;&#x2F;p&gt;&lt;h2 id=&quot;conclusions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#conclusions&quot;&gt;Conclusions&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;We saw how fast publishing a backend application on a custom domain can be following these instructions.&lt;&#x2F;p&gt;
&lt;p&gt;This article is not a comprehensive guide of either &lt;a href=&quot;https:&#x2F;&#x2F;http4s.org&#x2F;&quot;&gt;http4s&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;scala-cli.virtuslab.org&#x2F;&quot;&gt;scala-cli&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;fly.io&#x2F;&quot;&gt;fly.io&lt;&#x2F;a&gt;, but rather a series of TODO steps that might come in handy when you want to prototype an idea and show it to someone else rapidly.&lt;&#x2F;p&gt;
&lt;p&gt;Enjoy!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Just use just</title>
          <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://toniogela.dev/just/</link>
          <guid>https://toniogela.dev/just/</guid>
          <description xml:base="https://toniogela.dev/just/">&lt;p&gt;OMG, the blog is live! 😱 And this is the first article! 😱&lt;&#x2F;p&gt;
&lt;p&gt;This first article will be about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just&quot;&gt;Just&lt;&#x2F;a&gt; a &lt;strong&gt;command-line&lt;&#x2F;strong&gt; tool I recently discovered that immediately became essential in many work projects. Since it&#x27;s a tool written in &lt;strong&gt;Rust&lt;&#x2F;strong&gt;, it&#x27;s fast, it&#x27;s well designed and documented, it features colored output, and it&#x27;s an essential step in your terminal&#x27;s &lt;em&gt;hypsterization&lt;&#x2F;em&gt; process!&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s suppose you&#x27;ve just deployed your application via &lt;code&gt;scp&lt;&#x2F;code&gt; (&lt;em&gt;sigh!&lt;&#x2F;em&gt;) on one of your work&#x27;s machines. Maybe your application was already built using tools like &lt;a href=&quot;https:&#x2F;&#x2F;ben.kirw.in&#x2F;decline&#x2F;&quot;&gt;Decline&lt;&#x2F;a&gt;, so it&#x27;s already capable of parsing command-line options and flags and printing a complete help like:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ foo --help
&lt;&#x2F;span&gt;&lt;span&gt;Usage:
&lt;&#x2F;span&gt;&lt;span&gt;    foo schedule
&lt;&#x2F;span&gt;&lt;span&gt;    foo encrypt
&lt;&#x2F;span&gt;&lt;span&gt;    foo decrypt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;foo tool, it can encrypt and decrypt files and schedule operations
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Options and flags:
&lt;&#x2F;span&gt;&lt;span&gt;    --help
&lt;&#x2F;span&gt;&lt;span&gt;        Display this help text.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Subcommands:
&lt;&#x2F;span&gt;&lt;span&gt;    schedule
&lt;&#x2F;span&gt;&lt;span&gt;        schedules encryptions&#x2F;decriptions
&lt;&#x2F;span&gt;&lt;span&gt;    encrypt
&lt;&#x2F;span&gt;&lt;span&gt;        encrypts files
&lt;&#x2F;span&gt;&lt;span&gt;    decrypt
&lt;&#x2F;span&gt;&lt;span&gt;        decrypts files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But let&#x27;s add a &lt;strong&gt;slow-changing configuration&lt;&#x2F;strong&gt; to the scenario, which changes so often that it doesn&#x27;t justify a refactor to add a library like &lt;a href=&quot;https:&#x2F;&#x2F;cir.is&#x2F;&quot;&gt;Ciris&lt;&#x2F;a&gt; to your code. Maybe some &lt;strong&gt;non-power users&lt;&#x2F;strong&gt; need to change that configuration once a week or month &lt;em&gt;because of reasons&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What&#x27;s missing? Maybe there&#x27;s a local MySql that needs to be queried for maintenance operations, or perhaps a remote database&#x2F;storage&#x2F;service&#x2F;whatever that requires another command-line tool to be interacted with.&lt;&#x2F;p&gt;
&lt;p&gt;This is one of the times in which unmaintained, undocumented, faulty crap like &lt;strong&gt;maintenance_script.sh&lt;&#x2F;strong&gt; or &lt;strong&gt;fix_for_prod.sh&lt;&#x2F;strong&gt; begins to spread around. In no time, the situation will look similar to&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;home&#x2F;applicative_account&#x2F;perform_operation.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;home&#x2F;colleague1&#x2F;perform_operation_copy.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;home&#x2F;colleague1&#x2F;old_version&#x2F;perform_operation_as_root.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;home&#x2F;sre_guy&#x2F;this_should_fix_everything.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;home&#x2F;random_data_scientist&#x2F;do_not_run.sh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#(ofc it was chmod +x)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;90% of them will have the shebang &lt;code&gt;#!&#x2F;bin&#x2F;bash&lt;&#x2F;code&gt; while the 10% &lt;code&gt;#!&#x2F;bin&#x2F;sh&lt;&#x2F;code&gt;. Some of them will have &lt;code&gt;zsh&lt;&#x2F;code&gt; commands because there are people around that uses &lt;code&gt;zsh&lt;&#x2F;code&gt; (like me) that forgets that it doesn&#x27;t share 100% of the syntax with &lt;code&gt;bash&lt;&#x2F;code&gt; (not like me, I swear).&lt;&#x2F;p&gt;
&lt;p&gt;Most of them will contain almost the same commands like&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;mysql prod_db &amp;lt; maintenance.sql &amp;gt; maintenance_output.dump
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or templatized commands like&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;&#x2F;foo-${VERSION}&#x2F;bin&#x2F;foo&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;that depend on environment variables defined in the &lt;code&gt;.profile&lt;&#x2F;code&gt; of a deleted user.&lt;&#x2F;p&gt;
&lt;p&gt;The last time you used &lt;a href=&quot;https:&#x2F;&#x2F;www.shellcheck.net&#x2F;&quot;&gt;ShellCheck&lt;&#x2F;a&gt; to check the scripts, the linter exploded, and somewhere in the world, &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Stephen_R._Bourne&quot;&gt;Stephen Bourne&lt;&#x2F;a&gt; suddenly began crying without any apparent reason.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;just-to-the-rescue&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#just-to-the-rescue&quot;&gt;Just to the rescue&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;As its Github &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#just&quot;&gt;README&lt;&#x2F;a&gt; states, Just &lt;em&gt;is a handy way to save and run project-specific commands&lt;&#x2F;em&gt; called &lt;strong&gt;recipes&lt;&#x2F;strong&gt;, stored in a file called &lt;code&gt;justfile&lt;&#x2F;code&gt; with a syntax inspired by &lt;strong&gt;Make&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a tiny example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    cc *.c -o main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# test everything
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test-all&lt;&#x2F;span&gt;&lt;span&gt;: build
&lt;&#x2F;span&gt;&lt;span&gt;    .&#x2F;test --all
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# run a specific test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt; TEST: build
&lt;&#x2F;span&gt;&lt;span&gt;    .&#x2F;test --test {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TEST&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just searches for a &lt;code&gt;justfile&lt;&#x2F;code&gt; in the current directory written in its particular syntax, so let&#x27;s begin creating one with an hello world recipe and let&#x27;s try to run it:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello-world&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello World!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;
    &lt;summary&gt;output&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just hello-world
&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;Hello World!&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Hello World!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;As you can see, just &lt;strong&gt;shows the command&lt;&#x2F;strong&gt; that is about to run before running it, while we can&#x27;t say the same for global or user-defined &lt;code&gt;alias&lt;&#x2F;code&gt;es in various shells (unless using something like &lt;code&gt;set -x&lt;&#x2F;code&gt; for bash). If you want to suppress this behaviour, you can put a &lt;code&gt;@&lt;&#x2F;code&gt; in front of the command to hide.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello-world&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello World!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;
    &lt;summary&gt;output&lt;&#x2F;summary&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ just hello-world
&lt;&#x2F;span&gt;&lt;span&gt;Hello World!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;Let&#x27;s try to create a second recipe with an argument.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello-world&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello World!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;salute&lt;&#x2F;span&gt;&lt;span&gt; guy:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;guy&lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;
    &lt;summary&gt;output&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just salute
&lt;&#x2F;span&gt;&lt;span&gt;error: Recipe `salute` got 0 arguments but takes 1
&lt;&#x2F;span&gt;&lt;span&gt;usage:
&lt;&#x2F;span&gt;&lt;span&gt;    just salute guy
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just salute Tonio
&lt;&#x2F;span&gt;&lt;span&gt;Hello Tonio!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just --dry-run salute Tonio
&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;Hello Tonio&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;The recipe cannot obviously run without an argument since that argument is referred to in the body of the recipe using just syntax &lt;code&gt;{{ argument_or_variable_name }}&lt;&#x2F;code&gt;. If you want to &quot;debug&quot; the recipe that will run with the provided arguments, you can use the &lt;code&gt;--dry-run&lt;&#x2F;code&gt; command-line flag. This can come in handy if a command is long and complex and you have, for example, to schedule it in your crontab file. Just copy it from there.&lt;&#x2F;p&gt;
&lt;p&gt;Arguments are really powerful since they can have &lt;strong&gt;default values&lt;&#x2F;strong&gt; and can be &lt;strong&gt;variadic&lt;&#x2F;strong&gt; (both in the form &lt;code&gt;zero or more&lt;&#x2F;code&gt; or &lt;code&gt;one or more&lt;&#x2F;code&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt; target=&amp;quot;World&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello-all&lt;&#x2F;span&gt;&lt;span&gt; +targets=&amp;quot;Tim&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# One or more plus a default value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello to everyone: &lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targets&lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hello-any&lt;&#x2F;span&gt;&lt;span&gt; *targets: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Zero or more
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello &lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;targets&lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;details&gt;
    &lt;summary&gt;output&lt;&#x2F;summary&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just hello
&lt;&#x2F;span&gt;&lt;span&gt;Hello World!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just hello-all
&lt;&#x2F;span&gt;&lt;span&gt;Hello to everyone: Tim!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just hello-all &amp;quot;Tim&amp;quot; &amp;quot;Martha&amp;quot; &amp;quot;Lisa&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Hello to everyone: Tim Martha Lisa!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just hello-any
&lt;&#x2F;span&gt;&lt;span&gt;Hello !
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just hello-any &amp;quot;Bob&amp;quot; &amp;quot;Lucas&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Hello Bob Lucas!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;details&gt;
&lt;p&gt;We know enough syntax. Let&#x27;s try to build a meaningful example for our &lt;strong&gt;messed-up work machine&lt;&#x2F;strong&gt; and let&#x27;s try new features &lt;strong&gt;just&lt;&#x2F;strong&gt; if we need them (no pun intended 😄).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-almost-working-example&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#an-almost-working-example&quot;&gt;An almost working example&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;If we inspect the history of our machine, we&#x27;ll notice that most of the commands are &lt;code&gt;foo&lt;&#x2F;code&gt; invocations with &lt;code&gt;nohup&lt;&#x2F;code&gt; and stdin and stderr redirection into a &lt;code&gt;.log&lt;&#x2F;code&gt; file. We should consider refactoring the application, removing all the &lt;code&gt;println&lt;&#x2F;code&gt;s to replace them with a &lt;code&gt;logger.info&lt;&#x2F;code&gt;, maybe using a logging framework that automatically handles log rotation and similar.&lt;&#x2F;p&gt;
&lt;p&gt;In the meantime, we can standardize how &lt;code&gt;foo&lt;&#x2F;code&gt; is called, how the outputs are redirected, and its execution detached to avoid interactive sessions that might early terminate if you close a terminal session.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_version    &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.3.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_executable &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;foo-&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_version &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conf_file      &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;foo.conf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file       &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;foo.log&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# encrypts &amp;#39;target&amp;#39; and detaches
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encrypt&lt;&#x2F;span&gt;&lt;span&gt; target:
&lt;&#x2F;span&gt;&lt;span&gt;    nohup {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_executable&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;encrypt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conf_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;&amp;gt;&amp;gt; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# decrypts &amp;#39;target&amp;#39; and detaches
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;decrypt&lt;&#x2F;span&gt;&lt;span&gt; target:
&lt;&#x2F;span&gt;&lt;span&gt;    nohup {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_executable&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;decrypt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conf_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;&amp;gt;&amp;gt; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# schedules operations formatted like &amp;#39;&amp;lt;cron_expression&amp;gt; &amp;lt;decrypt|encrypt&amp;gt; &amp;lt;target&amp;gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt; operation:
&lt;&#x2F;span&gt;&lt;span&gt;    nohup {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_executable&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conf_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;&amp;gt;&amp;gt; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;(Probably &lt;code&gt;nohup&lt;&#x2F;code&gt; + &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; is overkilling, but who cares 😇? )&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s better. We&#x27;ve used &lt;strong&gt;variables&lt;&#x2F;strong&gt; to avoid repetitions, templatized every recipe and added comments. It would be nice, though, to directly tail the &lt;code&gt;log_file&lt;&#x2F;code&gt; once a recipe is launched and avoid repetitions even more.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_version    &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.3.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_executable &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;foo-&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_version &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conf_file      &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;foo.conf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file       &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;foo.log&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just --list --unsorted
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# encrypts &amp;#39;target&amp;#39; and detaches
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encrypt&lt;&#x2F;span&gt;&lt;span&gt; target:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just _run_detached &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just tail
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# decrypts &amp;#39;target&amp;#39; and detaches
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;decrypt&lt;&#x2F;span&gt;&lt;span&gt; target:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just _run_detached &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just tail
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# schedules operations formatted like &amp;#39;&amp;lt;cron_expression&amp;gt; &amp;lt;decrypt|encrypt&amp;gt; &amp;lt;target&amp;gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt; operation:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just _run_detached &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just tail 20
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Follows the log file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tail&lt;&#x2F;span&gt;&lt;span&gt; n=&amp;quot;200&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    tail -{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;}}f {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_run_detached&lt;&#x2F;span&gt;&lt;span&gt; command argument:
&lt;&#x2F;span&gt;&lt;span&gt;    nohup {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_executable&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argument&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conf_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;&amp;gt;&amp;gt; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nice, we&#x27;ve used many features of just, in particular recipes whose name begins with an underscore are called &lt;em&gt;hidden recipes&lt;&#x2F;em&gt;. Hidden means that if you run &lt;code&gt;just --list&lt;&#x2F;code&gt;, they won&#x27;t get printed since they&#x27;re meant to be used internally. A special recipe was used, the &lt;code&gt;default&lt;&#x2F;code&gt; one, that gets called if you prompt &lt;code&gt;just&lt;&#x2F;code&gt; without any recipe name. [EDIT] (Since the name is not precisely &lt;code&gt;default&lt;&#x2F;code&gt;, just runs the first recipe in the justfile, that has to be a recipe without arguments)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cli&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cli &quot;&gt;&lt;code class=&quot;language-cli&quot; data-lang=&quot;cli&quot;&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ just
&lt;&#x2F;span&gt;&lt;span&gt;Available recipes:
&lt;&#x2F;span&gt;&lt;span&gt;    encrypt target     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# encrypts &amp;#39;target&amp;#39; and detaches
&lt;&#x2F;span&gt;&lt;span&gt;    decrypt target     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# decrypts &amp;#39;target&amp;#39; and detaches
&lt;&#x2F;span&gt;&lt;span&gt;    schedule operation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# schedules operations formatted like &amp;#39;&amp;lt;cron_expression&amp;gt; &amp;lt;decrypt|encrypt&amp;gt; &amp;lt;target&amp;gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    tail n=&amp;quot;200&amp;quot;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Follows the log file
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh nice, the &lt;strong&gt;comments&lt;&#x2F;strong&gt; we wrote previously just became documentation! Plus, we called the &lt;code&gt;tail&lt;&#x2F;code&gt; recipe from others, letting &lt;code&gt;just encrypt &quot;something&quot;&lt;&#x2F;code&gt; resemble an interactive command.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s now set the same interpreter for all the recipes choosing from the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#shell&quot;&gt;available ones&lt;&#x2F;a&gt;: &lt;code&gt;set shell := [&quot;bash&quot;, &quot;-uc&quot;]&lt;&#x2F;code&gt;. This way, every recipe line will run in a newly spawned sub&lt;code&gt;shell&lt;&#x2F;code&gt;, &lt;code&gt;bash&lt;&#x2F;code&gt; in this case. If it feels like the way the shebang &lt;code&gt;#!&#x2F;bin&#x2F;bash&lt;&#x2F;code&gt; works, you&#x27;re right.&lt;&#x2F;p&gt;
&lt;p&gt;In fact, it&#x27;s possible to define &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#safer-bash-shebang-recipes&quot;&gt;shebang recipes&lt;&#x2F;a&gt; to be able to use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#setting-variables-in-a-recipe&quot;&gt;local variables in recipes&lt;&#x2F;a&gt; but remember to add &lt;code&gt;set -euxo pipefail&lt;&#x2F;code&gt; like the documentation suggests if you&#x27;re using Bash to maintain the fail-fast behaviour.&lt;&#x2F;p&gt;
&lt;p&gt;Mixing and stirring &lt;em&gt;commands&lt;&#x2F;em&gt;, &lt;em&gt;recipes&lt;&#x2F;em&gt;, &lt;em&gt;just features&lt;&#x2F;em&gt; you&#x27;ll probably come up with something similar to this &lt;strong&gt;prod-like example&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;div class=&quot;code-window&quot;&gt;
    &lt;div class=&quot;code-title&quot; style=&quot;background-color:#6d98ba;color:black;&quot; &gt;&lt;span
            class=&quot;dot-red&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-yellow&quot;&gt;&lt;&#x2F;span&gt;
        &lt;span class=&quot;dot-green&quot;&gt;&lt;&#x2F;span&gt; Justfile
    &lt;&#x2F;div&gt;
    &lt;div class=&quot;code-body&quot;&gt;&lt;pre data-lang=&quot;just&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-just &quot;&gt;&lt;code class=&quot;language-just&quot; data-lang=&quot;just&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set &lt;&#x2F;span&gt;&lt;span&gt;shell := [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bash&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-uc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_version    &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.3.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_executable &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;foo-&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_version &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;foo&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conf_file      &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;foo.conf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file       &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;foo.log&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Bar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bar_executable &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;bar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sre_victim     &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;baz@sre.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# MySql
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;my_sql_default_user &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;random_guy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump_query          &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select &amp;#39;I have no intention to write queries in this example&amp;#39;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now                 &lt;&#x2F;span&gt;&lt;span&gt;:= `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;date -u +&amp;quot;%Y-%m-%dT%H:%M:%SZ&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mysql_output_file   &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;home&#x2F;power_user&#x2F;mysql_dumps&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;now &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.dump&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Colors
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RED    &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;u001b[31m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GREEN  &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;u001b[32m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YELLOW &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;u001b[33m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BOLD   &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;u001b[1m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RESET  &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;u001b[0m&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## Foo Recipes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_default&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just --list --unsorted
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# encrypts &amp;#39;target&amp;#39; and detaches
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;encrypt&lt;&#x2F;span&gt;&lt;span&gt; target:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just _run_detached &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just tail
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# decrypts &amp;#39;target&amp;#39; and detaches
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;decrypt&lt;&#x2F;span&gt;&lt;span&gt; target:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just _run_detached &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just tail
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# schedules operations formatted like &amp;#39;&amp;lt;cron_expression&amp;gt; &amp;lt;decrypt|encrypt&amp;gt; &amp;lt;target&amp;gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt; operation:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just _run_detached &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;operation&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just tail 20
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Follows the log file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;tail&lt;&#x2F;span&gt;&lt;span&gt; n=&amp;quot;200&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    tail -{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;}}f {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Unsurprisingly kills foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;kill&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    pgrep -f {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_executable&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## Bar Recipes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Will notify an SRE with a boring mail.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just _bold_squares &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;YELLOW&lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;WARNING&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;echo -e &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BOLD&lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; A SRE will be notified with an e-mail!&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RESET&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bar_executable&lt;&#x2F;span&gt;&lt;span&gt;}} notify {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sre_victim&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## MySql Recipes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# runs the dump query
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dump&lt;&#x2F;span&gt;&lt;span&gt; username password:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just kill
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just _mysql_command_to {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump_query&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;gt; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mysql_output_file&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# runs the dump query with default user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dump-with-default-user&lt;&#x2F;span&gt;&lt;span&gt; password:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just kill
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;just _mysql_command_to {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;my_sql_default_user&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump_query&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;gt; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mysql_output_file&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## Hidden Recipes
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_bold_squares&lt;&#x2F;span&gt;&lt;span&gt; message:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@&lt;&#x2F;span&gt;&lt;span&gt;echo -e &amp;quot;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BOLD&lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RESET&lt;&#x2F;span&gt;&lt;span&gt;}}{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;}}{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RESET&lt;&#x2F;span&gt;&lt;span&gt;}}{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;BOLD&lt;&#x2F;span&gt;&lt;span&gt;}}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;{{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RESET&lt;&#x2F;span&gt;&lt;span&gt;}}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_mysql_command&lt;&#x2F;span&gt;&lt;span&gt; username password query:
&lt;&#x2F;span&gt;&lt;span&gt;    mysql -u {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;}} -p {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;}} -e {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_mysql_command_to&lt;&#x2F;span&gt;&lt;span&gt; username password query output_file:
&lt;&#x2F;span&gt;&lt;span&gt;    _mysql_command {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;gt; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output_file&lt;&#x2F;span&gt;&lt;span&gt;}}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_run_detached&lt;&#x2F;span&gt;&lt;span&gt; command argument:
&lt;&#x2F;span&gt;&lt;span&gt;    nohup {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foo_executable&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argument&lt;&#x2F;span&gt;&lt;span&gt;}} {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;conf_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;&amp;gt;&amp;gt; {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;log_file&lt;&#x2F;span&gt;&lt;span&gt;}} &amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;it-s-not-enough-to-enforce-people-to-not-mess-up-production-machines-with-crappy-shell-scripts&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#it-s-not-enough-to-enforce-people-to-not-mess-up-production-machines-with-crappy-shell-scripts&quot;&gt;&quot;It&#x27;s not enough to enforce people to not mess up production machines with crappy shell scripts!&quot;&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Obviously, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just&quot;&gt;just&lt;&#x2F;a&gt; doesn&#x27;t automatically solve every problem you might encounter in &lt;strong&gt;heavily unmaintained machines&lt;&#x2F;strong&gt; with a lot of conflicting shell scripts, mostly because of people, but at least:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It lets you concentrate every &lt;strong&gt;project-related&lt;&#x2F;strong&gt; commands in a &lt;strong&gt;single file&lt;&#x2F;strong&gt; that can be easily tracked by a VCS to become part of the deployment&lt;&#x2F;li&gt;
&lt;li&gt;It &lt;strong&gt;declaratively&lt;&#x2F;strong&gt; sets the interpreter&lt;&#x2F;li&gt;
&lt;li&gt;It lets you you write a multi-command script without relying on super-verbose and tricky &lt;code&gt;match-case&lt;&#x2F;code&gt; bash syntax with the addition of:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;default arguments&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;easy string templating&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#command-evaluation-using-backticks&quot;&gt;command evaluation&lt;&#x2F;a&gt; using backticks (see the &lt;code&gt;now&lt;&#x2F;code&gt; variable in the previous example)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#conditional-expressions&quot;&gt;conditional expressions&lt;&#x2F;a&gt; that are evaluated before the command execution&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;get_or_else&lt;&#x2F;code&gt; syntax for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#environment-variables&quot;&gt;environment variables&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;It integrates with &lt;code&gt;fzf&lt;&#x2F;code&gt; to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#conditional-expressions&quot;&gt;choose&lt;&#x2F;a&gt; argument-less recipes interactively&lt;&#x2F;li&gt;
&lt;li&gt;Recipes can depend on other recipes, like &lt;code&gt;tests&lt;&#x2F;code&gt; on &lt;code&gt;build&lt;&#x2F;code&gt; as in the &lt;a href=&quot;https:&#x2F;&#x2F;toniogela.dev&#x2F;just&#x2F;#just-to-the-rescue&quot;&gt;first example&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;It can generate its own shell completion scripts using &lt;code&gt;just --completions &amp;lt;shell_name&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;It can be used as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#just-scripts&quot;&gt;an interpreter&lt;&#x2F;a&gt;, turning &lt;code&gt;justfile&lt;&#x2F;code&gt;s in runnable just script simply prepending &lt;code&gt;#!&#x2F;usr&#x2F;bin&#x2F;env just --justfile&lt;&#x2F;code&gt; (This can be handy if you maybe want to use it with &lt;code&gt;crontab&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and &lt;strong&gt;HIPSTER ALERT&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It has its own &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;extractions&#x2F;setup-just&quot;&gt;Github Action&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;casey&#x2F;just#editor-support&quot;&gt;Syntax Highlight&lt;&#x2F;a&gt; for Vim, Emacs and Visual Studio Code is already available&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Creating practical recipes, installing the prebuilt binaries, and the command-line completion scripts can probably convince people to use it. If not, try documenting your software, using examples in the &lt;code&gt;justfile&lt;&#x2F;code&gt; that&#x27;s sitting in the home of the repo, or try harder using&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;**********************************
&lt;&#x2F;span&gt;&lt;span&gt;* Run `just` for a complete list *
&lt;&#x2F;span&gt;&lt;span&gt;* of available commands          *
&lt;&#x2F;span&gt;&lt;span&gt;**********************************
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;as the &lt;code&gt;&#x2F;etc&#x2F;motd&lt;&#x2F;code&gt; for the prod machines.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;more-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;#more-tools&quot;&gt;More Tools!&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;details&gt;
    &lt;summary&gt;SPOILER: next tool&lt;&#x2F;summary&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.getzola.org&#x2F;&quot;&gt;Zola&lt;&#x2F;a&gt; : the templating engine I&#x27;m using for this blog :)
&lt;&#x2F;details&gt;
</description>
      </item>
      <item>
          <title>Hello World</title>
          <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://toniogela.dev/hello-world/</link>
          <guid>https://toniogela.dev/hello-world/</guid>
          <description xml:base="https://toniogela.dev/hello-world/">&lt;p&gt;Hello, hooman; this is the very beginning of this blog. 🎉&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s still plenty of customisation and things to set up, &lt;strike&gt;like comments using &lt;a href=&quot;https:&#x2F;&#x2F;utteranc.es&#x2F;&quot;&gt;Utterance&lt;&#x2F;a&gt;&lt;&#x2F;strike&gt;. And don&#x27;t look at the &lt;strong&gt;about me&lt;&#x2F;strong&gt; page: it&#x27;s still a lorem ipsum.&lt;&#x2F;p&gt;
&lt;p&gt;This blog will be about &lt;a href=&quot;https:&#x2F;&#x2F;www.scala-lang.org&quot;&gt;Scala&lt;&#x2F;a&gt;, a bit of &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; (I&#x27;m in on its learning path), many command-line tools to automatise every aspect of a developer&#x27;s life, &lt;a href=&quot;https:&#x2F;&#x2F;typelevel.org&#x2F;cats&quot;&gt;cats&lt;&#x2F;a&gt; 🐱 in various forms and much other boring stuff.&lt;&#x2F;p&gt;
&lt;p&gt;Cheers!&lt;&#x2F;p&gt;
&lt;p&gt;[EDIT] The comment system now uses &lt;a href=&quot;https:&#x2F;&#x2F;giscus.app&#x2F;&quot;&gt;Giscus&lt;&#x2F;a&gt; 😄&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
